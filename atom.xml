<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Borderland</title>
  
  <subtitle>小亮的个人博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jaxchan.top/"/>
  <updated>2020-03-03T05:40:44.145Z</updated>
  <id>http://jaxchan.top/</id>
  
  <author>
    <name>JaxChan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python可视化</title>
    <link href="http://jaxchan.top/2020/python%E5%8F%AF%E8%A7%86%E5%8C%96.html/"/>
    <id>http://jaxchan.top/2020/python%E5%8F%AF%E8%A7%86%E5%8C%96.html/</id>
    <published>2020-03-03T05:33:34.000Z</published>
    <updated>2020-03-03T05:40:44.145Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>一直说要做一个python可视化的学习，今天就来认真学一学。</p><p>交互式的可视化起码我暂时都用不着，先学静态的。知乎搜了一些教程，先列出reference</p><p><a href="https://zhuanlan.zhihu.com/p/53308606" target="_blank" rel="noopener">Matplotlib 可视化最有价值的 50 个图表（附完整 Python 源代码）</a></p><p>留下的都是我可以理解，觉得有用的。加了些许的备注。</p><h1 id="matplotlib---几十个可视化图表">Matplotlib - 几十个可视化图表</h1><h2 id="准备工作">准备工作</h2><p>在代码运行前先引入下面的设置内容。 当然，单独的图表，可以重新设置显示要素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># !pip install brewer2mpl</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> warnings; warnings.filterwarnings(action=<span class="string">'once'</span>)</span><br><span class="line"></span><br><span class="line">large = <span class="number">22</span>; med = <span class="number">16</span>; small = <span class="number">12</span></span><br><span class="line">params = &#123;<span class="string">'axes.titlesize'</span>: large,</span><br><span class="line">          <span class="string">'legend.fontsize'</span>: med,</span><br><span class="line">          <span class="string">'figure.figsize'</span>: (<span class="number">16</span>, <span class="number">10</span>),</span><br><span class="line">          <span class="string">'axes.labelsize'</span>: med,</span><br><span class="line">          <span class="string">'axes.titlesize'</span>: med,</span><br><span class="line">          <span class="string">'xtick.labelsize'</span>: med,</span><br><span class="line">          <span class="string">'ytick.labelsize'</span>: med,</span><br><span class="line">          <span class="string">'figure.titlesize'</span>: large&#125;</span><br><span class="line">plt.rcParams.update(params)</span><br><span class="line">plt.style.use(<span class="string">'seaborn-whitegrid'</span>)</span><br><span class="line">sns.set_style(<span class="string">"white"</span>)</span><br><span class="line">%matplotlib inline</span><br><span class="line"></span><br><span class="line"><span class="comment"># Version</span></span><br><span class="line">print(mpl.__version__)  <span class="comment">#&gt; 3.0.0</span></span><br><span class="line">print(sns.__version__)  <span class="comment">#&gt; 0.9.0</span></span><br></pre></td></tr></table></figure><pre><code>3.1.30.10.0</code></pre><hr /><h2 id="关联-correlation">关联 （Correlation）</h2><p>关联图表用于可视化2个或更多变量之间的关系。 也就是说，一个变量如何相对于另一个变化。</p><h3 id="散点图scatter-plot">散点图（Scatter plot）</h3><p>散点图是用于研究两个变量之间关系的经典的和基本的图表。 如果数据中有多个组，则可能需要以不同颜色可视化每个组。 在 matplotlib 中，您可以使用 <code>plt.scatterplot（）</code> 方便地执行此操作。</p><h4 id="本散点图的表达内容">本散点图的表达内容</h4><p>看看在同一个category下的，人口和公司id之间的散点关系</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Import dataset </span></span><br><span class="line">midwest = pd.read_csv(<span class="string">"./midwest_filter.csv"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Prepare Data </span></span><br><span class="line"><span class="comment"># Create as many colors as there are unique midwest['category']</span></span><br><span class="line"><span class="comment"># 太多了，我截取了五个category</span></span><br><span class="line">categories = np.unique(midwest[<span class="string">'category'</span>])[<span class="number">0</span>:<span class="number">3</span>]</span><br><span class="line"><span class="comment">#tab10函数用于生成一个colormap</span></span><br><span class="line">colors = [plt.cm.tab10(i/float(len(categories)<span class="number">-1</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(categories))]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Draw Plot for Each Category</span></span><br><span class="line">plt.figure(figsize=(<span class="number">16</span>, <span class="number">10</span>), dpi= <span class="number">80</span>, facecolor=<span class="string">'w'</span>, edgecolor=<span class="string">'k'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, category <span class="keyword">in</span> enumerate(categories):</span><br><span class="line">    plt.scatter(<span class="string">'PID'</span>, <span class="string">'poptotal'</span>, </span><br><span class="line">                data=midwest.loc[midwest.category==category, :], </span><br><span class="line">                s=<span class="number">20</span>, cmap=colors[i], label=str(category))</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment"># Decorations</span></span><br><span class="line">plt.gca().set(xlim=(<span class="number">600</span>, <span class="number">800</span>), ylim=(<span class="number">0</span>, <span class="number">90000</span>),</span><br><span class="line">              xlabel=<span class="string">'PID'</span>, ylabel=<span class="string">'Population'</span>)</span><br><span class="line"></span><br><span class="line">plt.xticks(fontsize=<span class="number">12</span>); plt.yticks(fontsize=<span class="number">12</span>)</span><br><span class="line">plt.title(<span class="string">"Scatterplot of Midwest PID vs Population"</span>, fontsize=<span class="number">22</span>)</span><br><span class="line">plt.legend(fontsize=<span class="number">12</span>)    </span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><figure><img src="http://upload-images.jianshu.io/upload_images/15914329-eafd629563694284.png" alt="" /><figcaption>png</figcaption></figure><h3 id="带边界的气泡图bubble-plot-with-encircling">带边界的气泡图（Bubble plot with Encircling）</h3><p>有时，您希望在边界内显示一组点以强调其重要性。 在这个例子中，你从数据框中获取记录，并用下面代码中描述的 <code>encircle（）</code> 来使边界显示出来。</p><h4 id="本气泡图目的">本气泡图目的</h4><p>在我们使用散点图（同一个category下的面积和人口关系）后，想要给 属性state = IN 条件下的数据圈出标注。 其实就是画一个多边形</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> patches</span><br><span class="line"><span class="keyword">from</span> scipy.spatial <span class="keyword">import</span> ConvexHull</span><br><span class="line"><span class="keyword">import</span> warnings; warnings.simplefilter(<span class="string">'ignore'</span>)</span><br><span class="line">sns.set_style(<span class="string">"white"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Step 1: Prepare Data</span></span><br><span class="line">midwest = pd.read_csv(<span class="string">"./midwest_filter.csv"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># As many colors as there are unique midwest['category']</span></span><br><span class="line">categories = np.unique(midwest[<span class="string">'category'</span>])</span><br><span class="line">colors = [plt.cm.tab10(i/float(len(categories)<span class="number">-1</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(categories))]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Step 2: Draw Scatterplot with unique color for each category</span></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">16</span>, <span class="number">10</span>), dpi= <span class="number">80</span>, facecolor=<span class="string">'w'</span>, edgecolor=<span class="string">'k'</span>)    </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, category <span class="keyword">in</span> enumerate(categories):</span><br><span class="line">    plt.scatter(<span class="string">'area'</span>, <span class="string">'poptotal'</span>, data=midwest.loc[midwest.category==category, :], </span><br><span class="line">                s=<span class="string">'dot_size'</span>, cmap=colors[i], label=str(category), </span><br><span class="line">                edgecolors=<span class="string">'black'</span>, linewidths=<span class="number">.5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Step 3: Encircling</span></span><br><span class="line"><span class="comment"># https://stackoverflow.com/questions/44575681/how-do-i-encircle-different-data-sets-in-scatter-plot</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encircle</span><span class="params">(x,y, ax=None, **kw)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> ax: ax=plt.gca()</span><br><span class="line">    p = np.c_[x,y]</span><br><span class="line">    hull = ConvexHull(p)</span><br><span class="line">    poly = plt.Polygon(p[hull.vertices,:], **kw)</span><br><span class="line">    ax.add_patch(poly)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Select data to be encircled</span></span><br><span class="line">midwest_encircle_data = midwest.loc[midwest.state==<span class="string">'IN'</span>, :]                         </span><br><span class="line"></span><br><span class="line"><span class="comment"># Draw polygon surrounding vertices    </span></span><br><span class="line">encircle(midwest_encircle_data.area, midwest_encircle_data.poptotal, ec=<span class="string">"k"</span>, fc=<span class="string">"gold"</span>, alpha=<span class="number">0.1</span>)</span><br><span class="line">encircle(midwest_encircle_data.area, midwest_encircle_data.poptotal, ec=<span class="string">"firebrick"</span>, fc=<span class="string">"none"</span>, linewidth=<span class="number">1.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Step 4: Decorations</span></span><br><span class="line">plt.gca().set(xlim=(<span class="number">0.0</span>, <span class="number">0.1</span>), ylim=(<span class="number">0</span>, <span class="number">90000</span>),</span><br><span class="line">              xlabel=<span class="string">'Area'</span>, ylabel=<span class="string">'Population'</span>)</span><br><span class="line"></span><br><span class="line">plt.xticks(fontsize=<span class="number">12</span>); plt.yticks(fontsize=<span class="number">12</span>)</span><br><span class="line">plt.title(<span class="string">"Bubble Plot with Encircling"</span>, fontsize=<span class="number">22</span>)</span><br><span class="line">plt.legend(fontsize=<span class="number">12</span>)    </span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><figure><img src="http://upload-images.jianshu.io/upload_images/15914329-a56854dad395a36d.png" alt="" /><figcaption>png</figcaption></figure><h3 id="抖动图-jittering-with-stripplot">抖动图 （Jittering with stripplot）</h3><p>通常，多个数据点具有完全相同的 X 和 Y 值。 结果，多个点绘制会重叠并隐藏。 为避免这种情况，请将数据点稍微抖动，以便您可以直观地看到它们。 使用 seaborn 的 <code>stripplot（）</code> 很方便实现这个功能。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Import Data</span></span><br><span class="line">df = pd.read_csv(<span class="string">"./mpg_ggplot2.csv"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Draw Stripplot</span></span><br><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">16</span>,<span class="number">10</span>), dpi= <span class="number">80</span>)    </span><br><span class="line">sns.stripplot(df.cty, df.hwy, jitter=<span class="number">0.25</span>, size=<span class="number">8</span>, ax=ax, linewidth=<span class="number">.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Decorations</span></span><br><span class="line">plt.title(<span class="string">'Use jittered plots to avoid overlapping of points'</span>, fontsize=<span class="number">22</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><figure><img src="http://upload-images.jianshu.io/upload_images/15914329-0b960b28825d565e.png" alt="" /><figcaption>png</figcaption></figure><h3 id="计数图-counts-plot">计数图 （Counts Plot）</h3><p>避免点重叠问题的另一个选择是增加点的大小，这取决于该点中有多少点。 因此，点的大小越大，其周围的点的集中度越高。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Import Data</span></span><br><span class="line">df = pd.read_csv(<span class="string">"./mpg_ggplot2.csv"</span>)</span><br><span class="line">df_counts = df.groupby([<span class="string">'hwy'</span>, <span class="string">'cty'</span>]).size().reset_index(name=<span class="string">'counts'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Draw Stripplot</span></span><br><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">16</span>,<span class="number">10</span>), dpi= <span class="number">80</span>)    </span><br><span class="line">sns.stripplot(df_counts.cty, df_counts.hwy, size=df_counts.counts*<span class="number">2</span>, ax=ax)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Decorations</span></span><br><span class="line">plt.title(<span class="string">'Counts Plot - Size of circle is bigger as more points overlap'</span>, fontsize=<span class="number">22</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><figure><img src="http://upload-images.jianshu.io/upload_images/15914329-8ac6d0ef30a81a08.png" alt="" /><figcaption>png</figcaption></figure><h3 id="边缘直方图-marginal-histogram">边缘直方图 （Marginal Histogram）</h3><p>边缘直方图具有沿 X 和 Y 轴变量的直方图。 这用于可视化 X 和 Y 之间的关系以及单独的 X 和 Y 的单变量分布。 这种图经常用于探索性数据分析（EDA）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Import Data</span></span><br><span class="line">df = pd.read_csv(<span class="string">"./mpg_ggplot2.csv"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create Fig and gridspec</span></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">16</span>, <span class="number">10</span>), dpi= <span class="number">80</span>)</span><br><span class="line">grid = plt.GridSpec(<span class="number">4</span>, <span class="number">4</span>, hspace=<span class="number">0.5</span>, wspace=<span class="number">0.2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Define the axes</span></span><br><span class="line">ax_main = fig.add_subplot(grid[:<span class="number">-1</span>, :<span class="number">-1</span>])</span><br><span class="line">ax_right = fig.add_subplot(grid[:<span class="number">-1</span>, <span class="number">-1</span>], xticklabels=[], yticklabels=[])</span><br><span class="line">ax_bottom = fig.add_subplot(grid[<span class="number">-1</span>, <span class="number">0</span>:<span class="number">-1</span>], xticklabels=[], yticklabels=[])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Scatterplot on main ax</span></span><br><span class="line">ax_main.scatter(<span class="string">'displ'</span>, <span class="string">'hwy'</span>, s=df.cty*<span class="number">4</span>, c=df.manufacturer.astype(<span class="string">'category'</span>).cat.codes, alpha=<span class="number">.9</span>, data=df, cmap=<span class="string">"tab10"</span>, edgecolors=<span class="string">'gray'</span>, linewidths=<span class="number">.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># histogram on the right</span></span><br><span class="line">ax_bottom.hist(df.displ, <span class="number">40</span>, histtype=<span class="string">'stepfilled'</span>, orientation=<span class="string">'vertical'</span>, color=<span class="string">'deeppink'</span>)</span><br><span class="line">ax_bottom.invert_yaxis()</span><br><span class="line"></span><br><span class="line"><span class="comment"># histogram in the bottom</span></span><br><span class="line">ax_right.hist(df.hwy, <span class="number">40</span>, histtype=<span class="string">'stepfilled'</span>, orientation=<span class="string">'horizontal'</span>, color=<span class="string">'deeppink'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Decorations</span></span><br><span class="line">ax_main.set(title=<span class="string">'Scatterplot with Histograms \n displ vs hwy'</span>, xlabel=<span class="string">'displ'</span>, ylabel=<span class="string">'hwy'</span>)</span><br><span class="line">ax_main.title.set_fontsize(<span class="number">20</span>)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> ([ax_main.xaxis.label, ax_main.yaxis.label] + ax_main.get_xticklabels() + ax_main.get_yticklabels()):</span><br><span class="line">    item.set_fontsize(<span class="number">14</span>)</span><br><span class="line"></span><br><span class="line">xlabels = ax_main.get_xticks().tolist()</span><br><span class="line">ax_main.set_xticklabels(xlabels)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><figure><img src="http://upload-images.jianshu.io/upload_images/15914329-de9bb8df72387de5.png" alt="" /><figcaption>png</figcaption></figure><h3 id="相关图-correllogram">相关图 （Correllogram）</h3><p>相关图用于直观地查看给定数据框（或二维数组）中所有可能的数值变量对之间的相关度量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Import Dataset</span></span><br><span class="line">df = pd.read_csv(<span class="string">"./mtcars.csv"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Plot</span></span><br><span class="line">plt.figure(figsize=(<span class="number">12</span>,<span class="number">10</span>), dpi= <span class="number">80</span>)</span><br><span class="line">sns.heatmap(df.corr(), xticklabels=df.corr().columns, yticklabels=df.corr().columns, cmap=<span class="string">'RdYlGn'</span>, center=<span class="number">0</span>, annot=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Decorations</span></span><br><span class="line">plt.title(<span class="string">'Correlogram of mtcars'</span>, fontsize=<span class="number">22</span>)</span><br><span class="line">plt.xticks(fontsize=<span class="number">12</span>)</span><br><span class="line">plt.yticks(fontsize=<span class="number">12</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><figure><img src="http://upload-images.jianshu.io/upload_images/15914329-fe72c4e804cee78d.png" alt="" /><figcaption>png</figcaption></figure><h3 id="矩阵图-pairwise-plot">矩阵图 （Pairwise Plot）</h3><p>矩阵图是探索性分析中的最爱，用于理解所有可能的数值变量对之间的关系。 它是双变量分析的必备工具。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Load Dataset</span></span><br><span class="line">df = pd.read_csv(<span class="string">"./iris.csv"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Plot</span></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>,<span class="number">8</span>), dpi= <span class="number">80</span>)</span><br><span class="line">sns.pairplot(df, kind=<span class="string">"scatter"</span>, hue=<span class="string">"species"</span>, plot_kws=dict(s=<span class="number">80</span>, edgecolor=<span class="string">"white"</span>, linewidth=<span class="number">2.5</span>))</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><figure><img src="http://upload-images.jianshu.io/upload_images/15914329-091734a023187249.png" alt="" /><figcaption>png</figcaption></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Load Dataset</span></span><br><span class="line">df = pd.read_csv(<span class="string">"./iris.csv"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Plot</span></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>,<span class="number">8</span>), dpi= <span class="number">80</span>)</span><br><span class="line">sns.pairplot(df, kind=<span class="string">"reg"</span>, hue=<span class="string">"species"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><figure><img src="http://upload-images.jianshu.io/upload_images/15914329-bb9ce8f71da7ba1e.png" alt="" /><figcaption>png</figcaption></figure><h2 id="偏差-deviation">偏差 （Deviation）</h2><h3 id="发散型条形图-diverging-bars">发散型条形图 （Diverging Bars）</h3><p>如果您想根据单个指标查看项目的变化情况，并可视化此差异的顺序和数量，那么散型条形图 （Diverging Bars） 是一个很好的工具。 它有助于快速区分数据中组的性能，并且非常直观，并且可以立即传达这一点。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Prepare Data</span></span><br><span class="line">df = pd.read_csv(<span class="string">"./mtcars.csv"</span>)</span><br><span class="line">x = df.loc[:, [<span class="string">'mpg'</span>]]</span><br><span class="line">df[<span class="string">'mpg_z'</span>] = (x - x.mean())/x.std()</span><br><span class="line">df[<span class="string">'colors'</span>] = [<span class="string">'red'</span> <span class="keyword">if</span> x &lt; <span class="number">0</span> <span class="keyword">else</span> <span class="string">'green'</span> <span class="keyword">for</span> x <span class="keyword">in</span> df[<span class="string">'mpg_z'</span>]]</span><br><span class="line">df.sort_values(<span class="string">'mpg_z'</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">df.reset_index(inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Draw plot</span></span><br><span class="line">plt.figure(figsize=(<span class="number">14</span>,<span class="number">10</span>), dpi= <span class="number">80</span>)</span><br><span class="line">plt.hlines(y=df.index, xmin=<span class="number">0</span>, xmax=df.mpg_z, color=df.colors, alpha=<span class="number">0.4</span>, linewidth=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Decorations</span></span><br><span class="line">plt.gca().set(ylabel=<span class="string">'$Model$'</span>, xlabel=<span class="string">'$Mileage$'</span>)</span><br><span class="line">plt.yticks(df.index, df.cars, fontsize=<span class="number">12</span>)</span><br><span class="line">plt.title(<span class="string">'Diverging Bars of Car Mileage'</span>, fontdict=&#123;<span class="string">'size'</span>:<span class="number">20</span>&#125;)</span><br><span class="line">plt.grid(linestyle=<span class="string">'--'</span>, alpha=<span class="number">0.5</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><figure><img src="http://upload-images.jianshu.io/upload_images/15914329-b14cee7f12e7ebc2.png" alt="" /><figcaption>png</figcaption></figure><h3 id="发散型文本-diverging-texts">发散型文本 （Diverging Texts）</h3><p>发散型文本 （Diverging Texts）与发散型条形图 （Diverging Bars）相似，如果你想以一种漂亮和可呈现的方式显示图表中每个项目的价值，就可以使用这种方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Prepare Data</span></span><br><span class="line">df = pd.read_csv(<span class="string">"./mtcars.csv"</span>)</span><br><span class="line">x = df.loc[:, [<span class="string">'mpg'</span>]]</span><br><span class="line">df[<span class="string">'mpg_z'</span>] = (x - x.mean())/x.std()</span><br><span class="line">df[<span class="string">'colors'</span>] = [<span class="string">'red'</span> <span class="keyword">if</span> x &lt; <span class="number">0</span> <span class="keyword">else</span> <span class="string">'green'</span> <span class="keyword">for</span> x <span class="keyword">in</span> df[<span class="string">'mpg_z'</span>]]</span><br><span class="line">df.sort_values(<span class="string">'mpg_z'</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">df.reset_index(inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Draw plot</span></span><br><span class="line">plt.figure(figsize=(<span class="number">14</span>,<span class="number">14</span>), dpi= <span class="number">80</span>)</span><br><span class="line">plt.hlines(y=df.index, xmin=<span class="number">0</span>, xmax=df.mpg_z)</span><br><span class="line"><span class="keyword">for</span> x, y, tex <span class="keyword">in</span> zip(df.mpg_z, df.index, df.mpg_z):</span><br><span class="line">    t = plt.text(x, y, round(tex, <span class="number">2</span>), horizontalalignment=<span class="string">'right'</span> <span class="keyword">if</span> x &lt; <span class="number">0</span> <span class="keyword">else</span> <span class="string">'left'</span>, </span><br><span class="line">                 verticalalignment=<span class="string">'center'</span>, fontdict=&#123;<span class="string">'color'</span>:<span class="string">'red'</span> <span class="keyword">if</span> x &lt; <span class="number">0</span> <span class="keyword">else</span> <span class="string">'green'</span>, <span class="string">'size'</span>:<span class="number">14</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Decorations    </span></span><br><span class="line">plt.yticks(df.index, df.cars, fontsize=<span class="number">12</span>)</span><br><span class="line">plt.title(<span class="string">'Diverging Text Bars of Car Mileage'</span>, fontdict=&#123;<span class="string">'size'</span>:<span class="number">20</span>&#125;)</span><br><span class="line">plt.grid(linestyle=<span class="string">'--'</span>, alpha=<span class="number">0.5</span>)</span><br><span class="line">plt.xlim(<span class="number">-2.5</span>, <span class="number">2.5</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><figure><img src="http://upload-images.jianshu.io/upload_images/15914329-752e5112d93a5797.png" alt="" /><figcaption>png</figcaption></figure><h3 id="带标记的发散型棒棒糖图-diverging-lollipop-chart-with-markers">带标记的发散型棒棒糖图 （Diverging Lollipop Chart with Markers）</h3><p>带标记的棒棒糖图通过强调您想要引起注意的任何重要数据点并在图表中适当地给出推理，提供了一种对差异进行可视化的灵活方式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Prepare Data</span></span><br><span class="line">df = pd.read_csv(<span class="string">"./mtcars.csv"</span>)</span><br><span class="line">x = df.loc[:, [<span class="string">'mpg'</span>]]</span><br><span class="line">df[<span class="string">'mpg_z'</span>] = (x - x.mean())/x.std()</span><br><span class="line">df[<span class="string">'colors'</span>] = <span class="string">'black'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># color fiat differently</span></span><br><span class="line">df.loc[df.cars == <span class="string">'Fiat X1-9'</span>, <span class="string">'colors'</span>] = <span class="string">'darkorange'</span></span><br><span class="line">df.sort_values(<span class="string">'mpg_z'</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">df.reset_index(inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Draw plot</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.patches <span class="keyword">as</span> patches</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">14</span>,<span class="number">16</span>), dpi= <span class="number">80</span>)</span><br><span class="line">plt.hlines(y=df.index, xmin=<span class="number">0</span>, xmax=df.mpg_z, color=df.colors, alpha=<span class="number">0.4</span>, linewidth=<span class="number">1</span>)</span><br><span class="line">plt.scatter(df.mpg_z, df.index, color=df.colors, s=[<span class="number">600</span> <span class="keyword">if</span> x == <span class="string">'Fiat X1-9'</span> <span class="keyword">else</span> <span class="number">300</span> <span class="keyword">for</span> x <span class="keyword">in</span> df.cars], alpha=<span class="number">0.6</span>)</span><br><span class="line">plt.yticks(df.index, df.cars)</span><br><span class="line">plt.xticks(fontsize=<span class="number">12</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Annotate</span></span><br><span class="line">plt.annotate(<span class="string">'Mercedes Models'</span>, xy=(<span class="number">0.0</span>, <span class="number">11.0</span>), xytext=(<span class="number">1.0</span>, <span class="number">11</span>), xycoords=<span class="string">'data'</span>, </span><br><span class="line">            fontsize=<span class="number">15</span>, ha=<span class="string">'center'</span>, va=<span class="string">'center'</span>,</span><br><span class="line">            bbox=dict(boxstyle=<span class="string">'square'</span>, fc=<span class="string">'firebrick'</span>),</span><br><span class="line">            arrowprops=dict(arrowstyle=<span class="string">'-[, widthB=2.0, lengthB=1.5'</span>, lw=<span class="number">2.0</span>, color=<span class="string">'steelblue'</span>), color=<span class="string">'white'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add Patches</span></span><br><span class="line">p1 = patches.Rectangle((<span class="number">-2.0</span>, <span class="number">-1</span>), width=<span class="number">.3</span>, height=<span class="number">3</span>, alpha=<span class="number">.2</span>, facecolor=<span class="string">'red'</span>)</span><br><span class="line">p2 = patches.Rectangle((<span class="number">1.5</span>, <span class="number">27</span>), width=<span class="number">.8</span>, height=<span class="number">5</span>, alpha=<span class="number">.2</span>, facecolor=<span class="string">'green'</span>)</span><br><span class="line">plt.gca().add_patch(p1)</span><br><span class="line">plt.gca().add_patch(p2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Decorate</span></span><br><span class="line">plt.title(<span class="string">'Diverging Bars of Car Mileage'</span>, fontdict=&#123;<span class="string">'size'</span>:<span class="number">20</span>&#125;)</span><br><span class="line">plt.grid(linestyle=<span class="string">'--'</span>, alpha=<span class="number">0.5</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><figure><img src="http://upload-images.jianshu.io/upload_images/15914329-0db28dbab5856b7c.png" alt="" /><figcaption>png</figcaption></figure><h3 id="面积图-area-chart">面积图 （Area Chart）</h3><p>通过对轴和线之间的区域进行着色，面积图不仅强调峰和谷，而且还强调高点和低点的持续时间。 高点持续时间越长，线下面积越大。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># Prepare Data</span></span><br><span class="line">df = pd.read_csv(<span class="string">"./economics.csv"</span>, parse_dates=[<span class="string">'date'</span>]).head(<span class="number">100</span>)</span><br><span class="line">x = np.arange(df.shape[<span class="number">0</span>])</span><br><span class="line">y_returns = (df.psavert.diff().fillna(<span class="number">0</span>)/df.psavert.shift(<span class="number">1</span>)).fillna(<span class="number">0</span>) * <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Plot</span></span><br><span class="line">plt.figure(figsize=(<span class="number">16</span>,<span class="number">10</span>), dpi= <span class="number">80</span>)</span><br><span class="line">plt.fill_between(x[<span class="number">1</span>:], y_returns[<span class="number">1</span>:], <span class="number">0</span>, where=y_returns[<span class="number">1</span>:] &gt;= <span class="number">0</span>, facecolor=<span class="string">'green'</span>, interpolate=<span class="literal">True</span>, alpha=<span class="number">0.7</span>)</span><br><span class="line">plt.fill_between(x[<span class="number">1</span>:], y_returns[<span class="number">1</span>:], <span class="number">0</span>, where=y_returns[<span class="number">1</span>:] &lt;= <span class="number">0</span>, facecolor=<span class="string">'red'</span>, interpolate=<span class="literal">True</span>, alpha=<span class="number">0.7</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Annotate</span></span><br><span class="line">plt.annotate(<span class="string">'Peak \n1975'</span>, xy=(<span class="number">94.0</span>, <span class="number">21.0</span>), xytext=(<span class="number">88.0</span>, <span class="number">28</span>),</span><br><span class="line">             bbox=dict(boxstyle=<span class="string">'square'</span>, fc=<span class="string">'firebrick'</span>),</span><br><span class="line">             arrowprops=dict(facecolor=<span class="string">'steelblue'</span>, shrink=<span class="number">0.05</span>), fontsize=<span class="number">15</span>, color=<span class="string">'white'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Decorations</span></span><br><span class="line">xtickvals = [str(m)[:<span class="number">3</span>].upper()+<span class="string">"-"</span>+str(y) <span class="keyword">for</span> y,m <span class="keyword">in</span> zip(df.date.dt.year, df.date.dt.month_name())]</span><br><span class="line">plt.gca().set_xticks(x[::<span class="number">6</span>])</span><br><span class="line">plt.gca().set_xticklabels(xtickvals[::<span class="number">6</span>], rotation=<span class="number">90</span>, fontdict=&#123;<span class="string">'horizontalalignment'</span>: <span class="string">'center'</span>, <span class="string">'verticalalignment'</span>: <span class="string">'center_baseline'</span>&#125;)</span><br><span class="line">plt.ylim(<span class="number">-35</span>,<span class="number">35</span>)</span><br><span class="line">plt.xlim(<span class="number">1</span>,<span class="number">100</span>)</span><br><span class="line">plt.title(<span class="string">"Month Economics Return %"</span>, fontsize=<span class="number">22</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Monthly returns %'</span>)</span><br><span class="line">plt.grid(alpha=<span class="number">0.5</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><figure><img src="http://upload-images.jianshu.io/upload_images/15914329-ac4b1a90f07e94d7.png" alt="" /><figcaption>png</figcaption></figure><h2 id="排序-ranking">排序 （Ranking）</h2><h3 id="有序条形图-ordered-bar-chart">有序条形图 （Ordered Bar Chart）</h3><p>有序条形图有效地传达了项目的排名顺序。 但是，在图表上方添加度量标准的值，用户可以从图表本身获取精确信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Prepare Data</span></span><br><span class="line">df_raw = pd.read_csv(<span class="string">"./mpg_ggplot2.csv"</span>)</span><br><span class="line">df = df_raw[[<span class="string">'cty'</span>, <span class="string">'manufacturer'</span>]].groupby(<span class="string">'manufacturer'</span>).apply(<span class="keyword">lambda</span> x: x.mean())</span><br><span class="line">df.sort_values(<span class="string">'cty'</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">df.reset_index(inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Draw plot</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.patches <span class="keyword">as</span> patches</span><br><span class="line"></span><br><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">16</span>,<span class="number">10</span>), facecolor=<span class="string">'white'</span>, dpi= <span class="number">80</span>)</span><br><span class="line">ax.vlines(x=df.index, ymin=<span class="number">0</span>, ymax=df.cty, color=<span class="string">'firebrick'</span>, alpha=<span class="number">0.7</span>, linewidth=<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Annotate Text</span></span><br><span class="line"><span class="keyword">for</span> i, cty <span class="keyword">in</span> enumerate(df.cty):</span><br><span class="line">    ax.text(i, cty+<span class="number">0.5</span>, round(cty, <span class="number">1</span>), horizontalalignment=<span class="string">'center'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Title, Label, Ticks and Ylim</span></span><br><span class="line">ax.set_title(<span class="string">'Bar Chart for Highway Mileage'</span>, fontdict=&#123;<span class="string">'size'</span>:<span class="number">22</span>&#125;)</span><br><span class="line">ax.set(ylabel=<span class="string">'Miles Per Gallon'</span>, ylim=(<span class="number">0</span>, <span class="number">30</span>))</span><br><span class="line">plt.xticks(df.index, df.manufacturer.str.upper(), rotation=<span class="number">60</span>, horizontalalignment=<span class="string">'right'</span>, fontsize=<span class="number">12</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add patches to color the X axis labels</span></span><br><span class="line">p1 = patches.Rectangle((<span class="number">.57</span>, <span class="number">-0.005</span>), width=<span class="number">.33</span>, height=<span class="number">.13</span>, alpha=<span class="number">.1</span>, facecolor=<span class="string">'green'</span>, transform=fig.transFigure)</span><br><span class="line">p2 = patches.Rectangle((<span class="number">.124</span>, <span class="number">-0.005</span>), width=<span class="number">.446</span>, height=<span class="number">.13</span>, alpha=<span class="number">.1</span>, facecolor=<span class="string">'red'</span>, transform=fig.transFigure)</span><br><span class="line">fig.add_artist(p1)</span><br><span class="line">fig.add_artist(p2)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><figure><img src="http://upload-images.jianshu.io/upload_images/15914329-869facf85bf9f14d.png" alt="" /><figcaption>png</figcaption></figure><h3 id="棒棒糖图-lollipop-chart">棒棒糖图 （Lollipop Chart）</h3><p>棒棒糖图表以一种视觉上令人愉悦的方式提供与有序条形图类似的目的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Prepare Data</span></span><br><span class="line">df_raw = pd.read_csv(<span class="string">"./mpg_ggplot2.csv"</span>)</span><br><span class="line">df = df_raw[[<span class="string">'cty'</span>, <span class="string">'manufacturer'</span>]].groupby(<span class="string">'manufacturer'</span>).apply(<span class="keyword">lambda</span> x: x.mean())</span><br><span class="line">df.sort_values(<span class="string">'cty'</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">df.reset_index(inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Draw plot</span></span><br><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">16</span>,<span class="number">10</span>), dpi= <span class="number">80</span>)</span><br><span class="line">ax.vlines(x=df.index, ymin=<span class="number">0</span>, ymax=df.cty, color=<span class="string">'firebrick'</span>, alpha=<span class="number">0.7</span>, linewidth=<span class="number">2</span>)</span><br><span class="line">ax.scatter(x=df.index, y=df.cty, s=<span class="number">75</span>, color=<span class="string">'firebrick'</span>, alpha=<span class="number">0.7</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Title, Label, Ticks and Ylim</span></span><br><span class="line">ax.set_title(<span class="string">'Lollipop Chart for Highway Mileage'</span>, fontdict=&#123;<span class="string">'size'</span>:<span class="number">22</span>&#125;)</span><br><span class="line">ax.set_ylabel(<span class="string">'Miles Per Gallon'</span>)</span><br><span class="line">ax.set_xticks(df.index)</span><br><span class="line">ax.set_xticklabels(df.manufacturer.str.upper(), rotation=<span class="number">60</span>, fontdict=&#123;<span class="string">'horizontalalignment'</span>: <span class="string">'right'</span>, <span class="string">'size'</span>:<span class="number">12</span>&#125;)</span><br><span class="line">ax.set_ylim(<span class="number">0</span>, <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Annotate</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> df.itertuples():</span><br><span class="line">    ax.text(row.Index, row.cty+<span class="number">.5</span>, s=round(row.cty, <span class="number">2</span>), horizontalalignment= <span class="string">'center'</span>, verticalalignment=<span class="string">'bottom'</span>, fontsize=<span class="number">14</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><figure><img src="http://upload-images.jianshu.io/upload_images/15914329-c595501fe9bad139.png" alt="" /><figcaption>png</figcaption></figure><h2 id="分布-distribution">分布 （Distribution）</h2><h3 id="连续变量的直方图-histogram-for-continuous-variable">连续变量的直方图 （Histogram for Continuous Variable）</h3><p>直方图显示给定变量的频率分布。 下面的图表示基于类型变量对频率条进行分组，从而更好地了解连续变量和类型变量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Import Data</span></span><br><span class="line">df = pd.read_csv(<span class="string">"./mpg_ggplot2.csv"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Prepare data</span></span><br><span class="line">x_var = <span class="string">'displ'</span></span><br><span class="line">groupby_var = <span class="string">'class'</span></span><br><span class="line">df_agg = df.loc[:, [x_var, groupby_var]].groupby(groupby_var)</span><br><span class="line">vals = [df[x_var].values.tolist() <span class="keyword">for</span> i, df <span class="keyword">in</span> df_agg]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Draw</span></span><br><span class="line">plt.figure(figsize=(<span class="number">16</span>,<span class="number">9</span>), dpi= <span class="number">80</span>)</span><br><span class="line">colors = [plt.cm.Spectral(i/float(len(vals)<span class="number">-1</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(vals))]</span><br><span class="line">n, bins, patches = plt.hist(vals, <span class="number">30</span>, stacked=<span class="literal">True</span>, density=<span class="literal">False</span>, color=colors[:len(vals)])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Decoration</span></span><br><span class="line">plt.legend(&#123;group:col <span class="keyword">for</span> group, col <span class="keyword">in</span> zip(np.unique(df[groupby_var]).tolist(), colors[:len(vals)])&#125;)</span><br><span class="line">plt.title(<span class="string">f"Stacked Histogram of $<span class="subst">&#123;x_var&#125;</span>$ colored by $<span class="subst">&#123;groupby_var&#125;</span>$"</span>, fontsize=<span class="number">22</span>)</span><br><span class="line">plt.xlabel(x_var)</span><br><span class="line">plt.ylabel(<span class="string">"Frequency"</span>)</span><br><span class="line">plt.ylim(<span class="number">0</span>, <span class="number">25</span>)</span><br><span class="line">plt.xticks(ticks=bins[::<span class="number">3</span>], labels=[round(b,<span class="number">1</span>) <span class="keyword">for</span> b <span class="keyword">in</span> bins[::<span class="number">3</span>]])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><figure><img src="http://upload-images.jianshu.io/upload_images/15914329-73e61d43f7bd055e.png" alt="" /><figcaption>png</figcaption></figure><h3 id="密度图-density-plot">密度图 （Density Plot）</h3><p>密度图是一种常用工具，用于可视化连续变量的分布。 通过“响应”变量对它们进行分组，您可以检查 X 和 Y 之间的关系。以下情况用于表示目的，以描述城市里程的分布如何随着汽缸数的变化而变化。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Import Data</span></span><br><span class="line">df = pd.read_csv(<span class="string">"./mpg_ggplot2.csv"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Draw Plot</span></span><br><span class="line">plt.figure(figsize=(<span class="number">16</span>,<span class="number">10</span>), dpi= <span class="number">80</span>)</span><br><span class="line">sns.kdeplot(df.loc[df[<span class="string">'cyl'</span>] == <span class="number">4</span>, <span class="string">"cty"</span>], shade=<span class="literal">True</span>, color=<span class="string">"g"</span>, label=<span class="string">"Cyl=4"</span>, alpha=<span class="number">.7</span>)</span><br><span class="line">sns.kdeplot(df.loc[df[<span class="string">'cyl'</span>] == <span class="number">5</span>, <span class="string">"cty"</span>], shade=<span class="literal">True</span>, color=<span class="string">"deeppink"</span>, label=<span class="string">"Cyl=5"</span>, alpha=<span class="number">.7</span>)</span><br><span class="line">sns.kdeplot(df.loc[df[<span class="string">'cyl'</span>] == <span class="number">6</span>, <span class="string">"cty"</span>], shade=<span class="literal">True</span>, color=<span class="string">"dodgerblue"</span>, label=<span class="string">"Cyl=6"</span>, alpha=<span class="number">.7</span>)</span><br><span class="line">sns.kdeplot(df.loc[df[<span class="string">'cyl'</span>] == <span class="number">8</span>, <span class="string">"cty"</span>], shade=<span class="literal">True</span>, color=<span class="string">"orange"</span>, label=<span class="string">"Cyl=8"</span>, alpha=<span class="number">.7</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Decoration</span></span><br><span class="line">plt.title(<span class="string">'Density Plot of City Mileage by n_Cylinders'</span>, fontsize=<span class="number">22</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><figure><img src="http://upload-images.jianshu.io/upload_images/15914329-6048d364464a4563.png" alt="" /><figcaption>png</figcaption></figure><h3 id="箱形图-box-plot">箱形图 （Box Plot）</h3><p>箱形图是一种可视化分布的好方法，记住中位数、第25个第45个四分位数和异常值。 但是，您需要注意解释可能会扭曲该组中包含的点数的框的大小。 因此，手动提供每个框中的观察数量可以帮助克服这个缺点。</p><p>例如，左边的前两个框具有相同大小的框，即使它们的值分别是5和47。 因此，写入该组中的观察数量是必要的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Import Data</span></span><br><span class="line">df = pd.read_csv(<span class="string">"./mpg_ggplot2.csv"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Draw Plot</span></span><br><span class="line">plt.figure(figsize=(<span class="number">13</span>,<span class="number">10</span>), dpi= <span class="number">80</span>)</span><br><span class="line">sns.boxplot(x=<span class="string">'class'</span>, y=<span class="string">'hwy'</span>, data=df, notch=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add N Obs inside boxplot (optional)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_n_obs</span><span class="params">(df,group_col,y)</span>:</span></span><br><span class="line">    medians_dict = &#123;grp[<span class="number">0</span>]:grp[<span class="number">1</span>][y].median() <span class="keyword">for</span> grp <span class="keyword">in</span> df.groupby(group_col)&#125;</span><br><span class="line">    xticklabels = [x.get_text() <span class="keyword">for</span> x <span class="keyword">in</span> plt.gca().get_xticklabels()]</span><br><span class="line">    n_obs = df.groupby(group_col)[y].size().values</span><br><span class="line">    <span class="keyword">for</span> (x, xticklabel), n_ob <span class="keyword">in</span> zip(enumerate(xticklabels), n_obs):</span><br><span class="line">        plt.text(x, medians_dict[xticklabel]*<span class="number">1.01</span>, <span class="string">"#obs : "</span>+str(n_ob), horizontalalignment=<span class="string">'center'</span>, fontdict=&#123;<span class="string">'size'</span>:<span class="number">14</span>&#125;, color=<span class="string">'white'</span>)</span><br><span class="line"></span><br><span class="line">add_n_obs(df,group_col=<span class="string">'class'</span>,y=<span class="string">'hwy'</span>)    </span><br><span class="line"></span><br><span class="line"><span class="comment"># Decoration</span></span><br><span class="line">plt.title(<span class="string">'Box Plot of Highway Mileage by Vehicle Class'</span>, fontsize=<span class="number">22</span>)</span><br><span class="line">plt.ylim(<span class="number">10</span>, <span class="number">40</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><figure><img src="http://upload-images.jianshu.io/upload_images/15914329-e81de642836a787e.png" alt="" /><figcaption>png</figcaption></figure><h3 id="人口金字塔-population-pyramid">人口金字塔 （Population Pyramid）</h3><p>人口金字塔可用于显示由数量排序的组的分布。 或者它也可以用于显示人口的逐级过滤，因为它在下面用于显示有多少人通过营销渠道的每个阶段。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Read data</span></span><br><span class="line">df = pd.read_csv(<span class="string">"./email_campaign_funnel.csv"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Draw Plot</span></span><br><span class="line">plt.figure(figsize=(<span class="number">13</span>,<span class="number">10</span>), dpi= <span class="number">80</span>)</span><br><span class="line">group_col = <span class="string">'Gender'</span></span><br><span class="line">order_of_bars = df.Stage.unique()[::<span class="number">-1</span>]</span><br><span class="line">colors = [plt.cm.Spectral(i/float(len(df[group_col].unique())<span class="number">-1</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(df[group_col].unique()))]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> c, group <span class="keyword">in</span> zip(colors, df[group_col].unique()):</span><br><span class="line">    sns.barplot(x=<span class="string">'Users'</span>, y=<span class="string">'Stage'</span>, data=df.loc[df[group_col]==group, :], order=order_of_bars, color=c, label=group)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Decorations    </span></span><br><span class="line">plt.xlabel(<span class="string">"$Users$"</span>)</span><br><span class="line">plt.ylabel(<span class="string">"Stage of Purchase"</span>)</span><br><span class="line">plt.yticks(fontsize=<span class="number">12</span>)</span><br><span class="line">plt.title(<span class="string">"Population Pyramid of the Marketing Funnel"</span>, fontsize=<span class="number">22</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><figure><img src="http://upload-images.jianshu.io/upload_images/15914329-216a1d282ac91769.png" alt="" /><figcaption>png</figcaption></figure><h3 id="分类图-categorical-plots">分类图 （Categorical Plots）</h3><p>由 seaborn库 提供的分类图可用于可视化彼此相关的2个或更多分类变量的计数分布。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Load Dataset</span></span><br><span class="line">titanic = pd.read_csv(<span class="string">"./titanic.csv"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Plot</span></span><br><span class="line">g = sns.catplot(<span class="string">"alive"</span>, col=<span class="string">"deck"</span>, col_wrap=<span class="number">4</span>,</span><br><span class="line">                data=titanic[titanic.deck.notnull()],</span><br><span class="line">                kind=<span class="string">"count"</span>, height=<span class="number">3.5</span>, aspect=<span class="number">.8</span>, </span><br><span class="line">                palette=<span class="string">'tab20'</span>)</span><br><span class="line"></span><br><span class="line">fig.suptitle(<span class="string">'sf'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><figure><img src="http://upload-images.jianshu.io/upload_images/15914329-882f696c5d319cd3.png" alt="" /><figcaption>png</figcaption></figure><h2 id="组成-composition">组成 （Composition）</h2><h3 id="华夫饼图-waffle-chart">华夫饼图 （Waffle Chart）</h3><p>可以使用 pywaffle包 创建华夫饼图，并用于显示更大群体中的组的组成。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! pip install pywaffle</span></span><br><span class="line"><span class="comment"># Reference: https://stackoverflow.com/questions/41400136/how-to-do-waffle-charts-in-python-square-piechart</span></span><br><span class="line"><span class="keyword">from</span> pywaffle <span class="keyword">import</span> Waffle</span><br><span class="line"></span><br><span class="line"><span class="comment"># Import</span></span><br><span class="line">df_raw = pd.read_csv(<span class="string">"./mpg_ggplot2.csv"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Prepare Data</span></span><br><span class="line">df = df_raw.groupby(<span class="string">'class'</span>).size().reset_index(name=<span class="string">'counts'</span>)</span><br><span class="line">n_categories = df.shape[<span class="number">0</span>]</span><br><span class="line">colors = [plt.cm.inferno_r(i/float(n_categories)) <span class="keyword">for</span> i <span class="keyword">in</span> range(n_categories)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Draw Plot and Decorate</span></span><br><span class="line">fig = plt.figure(</span><br><span class="line">    FigureClass=Waffle,</span><br><span class="line">    plots=&#123;</span><br><span class="line">        <span class="string">'111'</span>: &#123;</span><br><span class="line">            <span class="string">'values'</span>: df[<span class="string">'counts'</span>],</span><br><span class="line">            <span class="string">'labels'</span>: [<span class="string">"&#123;0&#125; (&#123;1&#125;)"</span>.format(n[<span class="number">0</span>], n[<span class="number">1</span>]) <span class="keyword">for</span> n <span class="keyword">in</span> df[[<span class="string">'class'</span>, <span class="string">'counts'</span>]].itertuples()],</span><br><span class="line">            <span class="string">'legend'</span>: &#123;<span class="string">'loc'</span>: <span class="string">'upper left'</span>, <span class="string">'bbox_to_anchor'</span>: (<span class="number">1.05</span>, <span class="number">1</span>), <span class="string">'fontsize'</span>: <span class="number">12</span>&#125;,</span><br><span class="line">            <span class="string">'title'</span>: &#123;<span class="string">'label'</span>: <span class="string">'# Vehicles by Class'</span>, <span class="string">'loc'</span>: <span class="string">'center'</span>, <span class="string">'fontsize'</span>:<span class="number">18</span>&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    rows=<span class="number">7</span>,</span><br><span class="line">    colors=colors,</span><br><span class="line">    figsize=(<span class="number">16</span>, <span class="number">9</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure><img src="http://upload-images.jianshu.io/upload_images/15914329-bf1efe56ba90c1f8.png" alt="" /><figcaption>png</figcaption></figure><h3 id="饼图-pie-chart">饼图 （Pie Chart）</h3><p>饼图是显示组成的经典方式。 然而，现在通常不建议使用它，因为馅饼部分的面积有时会变得误导。 因此，如果您要使用饼图，强烈建议明确记下饼图每个部分的百分比或数字。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Import</span></span><br><span class="line">df_raw = pd.read_csv(<span class="string">"https://github.com/selva86/datasets/raw/master/mpg_ggplot2.csv"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Prepare Data</span></span><br><span class="line">df = df_raw.groupby(<span class="string">'class'</span>).size().reset_index(name=<span class="string">'counts'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Draw Plot</span></span><br><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">12</span>, <span class="number">7</span>), subplot_kw=dict(aspect=<span class="string">"equal"</span>), dpi= <span class="number">80</span>)</span><br><span class="line"></span><br><span class="line">data = df[<span class="string">'counts'</span>]</span><br><span class="line">categories = df[<span class="string">'class'</span>]</span><br><span class="line">explode = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.1</span>,<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(pct, allvals)</span>:</span></span><br><span class="line">    absolute = int(pct/<span class="number">100.</span>*np.sum(allvals))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"&#123;:.1f&#125;% (&#123;:d&#125; )"</span>.format(pct, absolute)</span><br><span class="line"></span><br><span class="line">wedges, texts, autotexts = ax.pie(data, </span><br><span class="line">                                  autopct=<span class="keyword">lambda</span> pct: func(pct, data),</span><br><span class="line">                                  textprops=dict(color=<span class="string">"w"</span>), </span><br><span class="line">                                  colors=plt.cm.Dark2.colors,</span><br><span class="line">                                 startangle=<span class="number">140</span>,</span><br><span class="line">                                 explode=explode)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Decoration</span></span><br><span class="line">ax.legend(wedges, categories, title=<span class="string">"Vehicle Class"</span>, loc=<span class="string">"center left"</span>, bbox_to_anchor=(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0.5</span>, <span class="number">1</span>))</span><br><span class="line">plt.setp(autotexts, size=<span class="number">10</span>, weight=<span class="number">700</span>)</span><br><span class="line">ax.set_title(<span class="string">"Class of Vehicles: Pie Chart"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><figure><img src="http://upload-images.jianshu.io/upload_images/15914329-d6860fc3a7600962.png" alt="" /><figcaption>png</figcaption></figure><h3 id="条形图-bar-chart">条形图 （Bar Chart）</h3><p>条形图是基于计数或任何给定指标可视化项目的经典方式。 在下面的图表中，我为每个项目使用了不同的颜色，但您通常可能希望为所有项目选择一种颜色，除非您按组对其进行着色。 颜色名称存储在下面代码中的all_colors中。 您可以通过在<code>plt.plot（）</code>中设置颜色参数来更改条的颜色。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># Import Data</span></span><br><span class="line">df_raw = pd.read_csv(<span class="string">"./mpg_ggplot2.csv"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Prepare Data</span></span><br><span class="line">df = df_raw.groupby(<span class="string">'manufacturer'</span>).size().reset_index(name=<span class="string">'counts'</span>)</span><br><span class="line">n = df[<span class="string">'manufacturer'</span>].unique().__len__()+<span class="number">1</span></span><br><span class="line">all_colors = list(plt.cm.colors.cnames.keys())</span><br><span class="line">random.seed(<span class="number">100</span>)</span><br><span class="line">c = random.choices(all_colors, k=n)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Plot Bars</span></span><br><span class="line">plt.figure(figsize=(<span class="number">16</span>,<span class="number">10</span>), dpi= <span class="number">80</span>)</span><br><span class="line">plt.bar(df[<span class="string">'manufacturer'</span>], df[<span class="string">'counts'</span>], color=c, width=<span class="number">.5</span>)</span><br><span class="line"><span class="keyword">for</span> i, val <span class="keyword">in</span> enumerate(df[<span class="string">'counts'</span>].values):</span><br><span class="line">    plt.text(i, val, float(val), horizontalalignment=<span class="string">'center'</span>, verticalalignment=<span class="string">'bottom'</span>, fontdict=&#123;<span class="string">'fontweight'</span>:<span class="number">500</span>, <span class="string">'size'</span>:<span class="number">12</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Decoration</span></span><br><span class="line">plt.gca().set_xticklabels(df[<span class="string">'manufacturer'</span>], rotation=<span class="number">60</span>, horizontalalignment= <span class="string">'right'</span>)</span><br><span class="line">plt.title(<span class="string">"Number of Vehicles by Manaufacturers"</span>, fontsize=<span class="number">22</span>)</span><br><span class="line">plt.ylabel(<span class="string">'# Vehicles'</span>)</span><br><span class="line">plt.ylim(<span class="number">0</span>, <span class="number">45</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><figure><img src="http://upload-images.jianshu.io/upload_images/15914329-2640d6152c6dcf4a.png" alt="" /><figcaption>png</figcaption></figure><h2 id="变化-change">变化 （Change）</h2><h3 id="带波峰波谷标记的时序图-time-series-with-peaks-and-troughs-annotated">带波峰波谷标记的时序图 （Time Series with Peaks and Troughs Annotated）</h3><p>下面的时间序列绘制了所有峰值和低谷，并注释了所选特殊事件的发生。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Import Data</span></span><br><span class="line">df = pd.read_csv(<span class="string">'https://github.com/selva86/datasets/raw/master/AirPassengers.csv'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Get the Peaks and Troughs</span></span><br><span class="line">data = df[<span class="string">'traffic'</span>].values</span><br><span class="line">doublediff = np.diff(np.sign(np.diff(data)))</span><br><span class="line">peak_locations = np.where(doublediff == <span class="number">-2</span>)[<span class="number">0</span>] + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">doublediff2 = np.diff(np.sign(np.diff(<span class="number">-1</span>*data)))</span><br><span class="line">trough_locations = np.where(doublediff2 == <span class="number">-2</span>)[<span class="number">0</span>] + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Draw Plot</span></span><br><span class="line">plt.figure(figsize=(<span class="number">16</span>,<span class="number">10</span>), dpi= <span class="number">80</span>)</span><br><span class="line">plt.plot(<span class="string">'date'</span>, <span class="string">'traffic'</span>, data=df, color=<span class="string">'tab:blue'</span>, label=<span class="string">'Air Traffic'</span>)</span><br><span class="line">plt.scatter(df.date[peak_locations], df.traffic[peak_locations], marker=mpl.markers.CARETUPBASE, color=<span class="string">'tab:green'</span>, s=<span class="number">100</span>, label=<span class="string">'Peaks'</span>)</span><br><span class="line">plt.scatter(df.date[trough_locations], df.traffic[trough_locations], marker=mpl.markers.CARETDOWNBASE, color=<span class="string">'tab:red'</span>, s=<span class="number">100</span>, label=<span class="string">'Troughs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Annotate</span></span><br><span class="line"><span class="keyword">for</span> t, p <span class="keyword">in</span> zip(trough_locations[<span class="number">1</span>::<span class="number">5</span>], peak_locations[::<span class="number">3</span>]):</span><br><span class="line">    plt.text(df.date[p], df.traffic[p]+<span class="number">15</span>, df.date[p], horizontalalignment=<span class="string">'center'</span>, color=<span class="string">'darkgreen'</span>)</span><br><span class="line">    plt.text(df.date[t], df.traffic[t]<span class="number">-35</span>, df.date[t], horizontalalignment=<span class="string">'center'</span>, color=<span class="string">'darkred'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Decoration</span></span><br><span class="line">plt.ylim(<span class="number">50</span>,<span class="number">750</span>)</span><br><span class="line">xtick_location = df.index.tolist()[::<span class="number">6</span>]</span><br><span class="line">xtick_labels = df.date.tolist()[::<span class="number">6</span>]</span><br><span class="line">plt.xticks(ticks=xtick_location, labels=xtick_labels, rotation=<span class="number">90</span>, fontsize=<span class="number">12</span>, alpha=<span class="number">.7</span>)</span><br><span class="line">plt.title(<span class="string">"Peak and Troughs of Air Passengers Traffic (1949 - 1969)"</span>, fontsize=<span class="number">22</span>)</span><br><span class="line">plt.yticks(fontsize=<span class="number">12</span>, alpha=<span class="number">.7</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Lighten borders</span></span><br><span class="line">plt.gca().spines[<span class="string">"top"</span>].set_alpha(<span class="number">.0</span>)</span><br><span class="line">plt.gca().spines[<span class="string">"bottom"</span>].set_alpha(<span class="number">.3</span>)</span><br><span class="line">plt.gca().spines[<span class="string">"right"</span>].set_alpha(<span class="number">.0</span>)</span><br><span class="line">plt.gca().spines[<span class="string">"left"</span>].set_alpha(<span class="number">.3</span>)</span><br><span class="line"></span><br><span class="line">plt.legend(loc=<span class="string">'upper left'</span>)</span><br><span class="line">plt.grid(axis=<span class="string">'y'</span>, alpha=<span class="number">.3</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><figure><img src="http://upload-images.jianshu.io/upload_images/15914329-b990bfa669bd957d.png" alt="" /><figcaption>png</figcaption></figure><h3 id="多个时间序列-multiple-time-series">多个时间序列 （Multiple Time Series）</h3><p>您可以绘制多个时间序列，在同一图表上测量相同的值，如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Import Data</span></span><br><span class="line">df = pd.read_csv(<span class="string">'./mortality.csv'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Define the upper limit, lower limit, interval of Y axis and colors</span></span><br><span class="line">y_LL = <span class="number">100</span></span><br><span class="line">y_UL = int(df.iloc[:, <span class="number">1</span>:].max().max()*<span class="number">1.1</span>)</span><br><span class="line">y_interval = <span class="number">400</span></span><br><span class="line">mycolors = [<span class="string">'tab:red'</span>, <span class="string">'tab:blue'</span>, <span class="string">'tab:green'</span>, <span class="string">'tab:orange'</span>]    </span><br><span class="line"></span><br><span class="line"><span class="comment"># Draw Plot and Annotate</span></span><br><span class="line">fig, ax = plt.subplots(<span class="number">1</span>,<span class="number">1</span>,figsize=(<span class="number">16</span>, <span class="number">9</span>), dpi= <span class="number">80</span>)    </span><br><span class="line"></span><br><span class="line">columns = df.columns[<span class="number">1</span>:]  </span><br><span class="line"><span class="keyword">for</span> i, column <span class="keyword">in</span> enumerate(columns):</span><br><span class="line">    <span class="comment"># 原文此处有误，Python数据之道 备注</span></span><br><span class="line">    <span class="comment"># 访问 liyangbit.com ， 查看本文完整内容</span></span><br><span class="line">    plt.plot(df.date.values, df[column].values, lw=<span class="number">1.5</span>, color=mycolors[i])    </span><br><span class="line">    plt.text(df.shape[<span class="number">0</span>]+<span class="number">1</span>, df[column].values[<span class="number">-1</span>], column, fontsize=<span class="number">14</span>, color=mycolors[i])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Draw Tick lines  </span></span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> range(y_LL, y_UL, y_interval):    </span><br><span class="line">    plt.hlines(y, xmin=<span class="number">0</span>, xmax=<span class="number">71</span>, colors=<span class="string">'black'</span>, alpha=<span class="number">0.3</span>, linestyles=<span class="string">"--"</span>, lw=<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Decorations    </span></span><br><span class="line">plt.tick_params(axis=<span class="string">"both"</span>, which=<span class="string">"both"</span>, bottom=<span class="literal">False</span>, top=<span class="literal">False</span>,    </span><br><span class="line">                labelbottom=<span class="literal">True</span>, left=<span class="literal">False</span>, right=<span class="literal">False</span>, labelleft=<span class="literal">True</span>)        </span><br><span class="line"></span><br><span class="line"><span class="comment"># Lighten borders</span></span><br><span class="line">plt.gca().spines[<span class="string">"top"</span>].set_alpha(<span class="number">.3</span>)</span><br><span class="line">plt.gca().spines[<span class="string">"bottom"</span>].set_alpha(<span class="number">.3</span>)</span><br><span class="line">plt.gca().spines[<span class="string">"right"</span>].set_alpha(<span class="number">.3</span>)</span><br><span class="line">plt.gca().spines[<span class="string">"left"</span>].set_alpha(<span class="number">.3</span>)</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">'Number of Deaths from Lung Diseases in the UK (1974-1979)'</span>, fontsize=<span class="number">22</span>)</span><br><span class="line">plt.yticks(range(y_LL, y_UL, y_interval), [str(y) <span class="keyword">for</span> y <span class="keyword">in</span> range(y_LL, y_UL, y_interval)], fontsize=<span class="number">12</span>)    </span><br><span class="line">plt.xticks(range(<span class="number">0</span>, df.shape[<span class="number">0</span>], <span class="number">12</span>), df.date.values[::<span class="number">12</span>], horizontalalignment=<span class="string">'left'</span>, fontsize=<span class="number">12</span>)    </span><br><span class="line">plt.ylim(y_LL, y_UL)    </span><br><span class="line">plt.xlim(<span class="number">-2</span>, <span class="number">80</span>)    </span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><figure><img src="http://upload-images.jianshu.io/upload_images/15914329-81d0b50987fd3bbd.png" alt="" /><figcaption>png</figcaption></figure><h3 id="使用辅助-y-轴来绘制不同范围的图形-plotting-with-different-scales-using-secondary-y-axis">使用辅助 Y 轴来绘制不同范围的图形 （Plotting with different scales using secondary Y axis）</h3><p>如果要显示在同一时间点测量两个不同数量的两个时间序列，则可以在右侧的辅助Y轴上再绘制第二个系列。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Import Data</span></span><br><span class="line">df = pd.read_csv(<span class="string">"./economics.csv"</span>)</span><br><span class="line"></span><br><span class="line">x = df[<span class="string">'date'</span>]</span><br><span class="line">y1 = df[<span class="string">'psavert'</span>]</span><br><span class="line">y2 = df[<span class="string">'unemploy'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Plot Line1 (Left Y Axis)</span></span><br><span class="line">fig, ax1 = plt.subplots(<span class="number">1</span>,<span class="number">1</span>,figsize=(<span class="number">16</span>,<span class="number">9</span>), dpi= <span class="number">80</span>)</span><br><span class="line">ax1.plot(x, y1, color=<span class="string">'tab:red'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Plot Line2 (Right Y Axis)</span></span><br><span class="line">ax2 = ax1.twinx()  <span class="comment"># instantiate a second axes that shares the same x-axis</span></span><br><span class="line">ax2.plot(x, y2, color=<span class="string">'tab:blue'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Decorations</span></span><br><span class="line"><span class="comment"># ax1 (left Y axis)</span></span><br><span class="line">ax1.set_xlabel(<span class="string">'Year'</span>, fontsize=<span class="number">20</span>)</span><br><span class="line">ax1.tick_params(axis=<span class="string">'x'</span>, rotation=<span class="number">0</span>, labelsize=<span class="number">12</span>)</span><br><span class="line">ax1.set_ylabel(<span class="string">'Personal Savings Rate'</span>, color=<span class="string">'tab:red'</span>, fontsize=<span class="number">20</span>)</span><br><span class="line">ax1.tick_params(axis=<span class="string">'y'</span>, rotation=<span class="number">0</span>, labelcolor=<span class="string">'tab:red'</span> )</span><br><span class="line">ax1.grid(alpha=<span class="number">.4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ax2 (right Y axis)</span></span><br><span class="line">ax2.set_ylabel(<span class="string">"# Unemployed (1000's)"</span>, color=<span class="string">'tab:blue'</span>, fontsize=<span class="number">20</span>)</span><br><span class="line">ax2.tick_params(axis=<span class="string">'y'</span>, labelcolor=<span class="string">'tab:blue'</span>)</span><br><span class="line">ax2.set_xticks(np.arange(<span class="number">0</span>, len(x), <span class="number">60</span>))</span><br><span class="line">ax2.set_xticklabels(x[::<span class="number">60</span>], rotation=<span class="number">90</span>, fontdict=&#123;<span class="string">'fontsize'</span>:<span class="number">10</span>&#125;)</span><br><span class="line">ax2.set_title(<span class="string">"Personal Savings Rate vs Unemployed: Plotting in Secondary Y Axis"</span>, fontsize=<span class="number">22</span>)</span><br><span class="line">fig.tight_layout()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><figure><img src="http://upload-images.jianshu.io/upload_images/15914329-370e407fab36a59e.png" alt="" /><figcaption>png</figcaption></figure><h2 id="分组-groups">分组 （Groups）</h2><h3 id="树状图-dendrogram">树状图 （Dendrogram）</h3><p>树形图基于给定的距离度量将相似的点组合在一起，并基于点的相似性将它们组织在树状链接中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scipy.cluster.hierarchy <span class="keyword">as</span> shc</span><br><span class="line"></span><br><span class="line"><span class="comment"># Import Data</span></span><br><span class="line">df = pd.read_csv(<span class="string">'./USArrests.csv'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Plot</span></span><br><span class="line">plt.figure(figsize=(<span class="number">16</span>, <span class="number">10</span>), dpi= <span class="number">80</span>)  </span><br><span class="line">plt.title(<span class="string">"USArrests Dendograms"</span>, fontsize=<span class="number">22</span>)  </span><br><span class="line">dend = shc.dendrogram(shc.linkage(df[[<span class="string">'Murder'</span>, <span class="string">'Assault'</span>, <span class="string">'UrbanPop'</span>, <span class="string">'Rape'</span>]], method=<span class="string">'ward'</span>), labels=df.State.values, color_threshold=<span class="number">100</span>)  </span><br><span class="line">plt.xticks(fontsize=<span class="number">12</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><figure><img src="http://upload-images.jianshu.io/upload_images/15914329-ecb696839eb9ffbf.png" alt="" /><figcaption>png</figcaption></figure><h3 id="簇状图-cluster-plot">簇状图 （Cluster Plot）</h3><p>簇状图 （Cluster Plot）可用于划分属于同一群集的点。 下面是根据USArrests数据集将美国各州分为5组的代表性示例。 此图使用“谋杀”和“攻击”列作为X和Y轴。 或者，您可以将第一个到主要组件用作X轴和Y轴。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.cluster <span class="keyword">import</span> AgglomerativeClustering</span><br><span class="line"><span class="keyword">from</span> scipy.spatial <span class="keyword">import</span> ConvexHull</span><br><span class="line"></span><br><span class="line"><span class="comment"># Import Data</span></span><br><span class="line">df = pd.read_csv(<span class="string">'./USArrests.csv'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Agglomerative Clustering</span></span><br><span class="line">cluster = AgglomerativeClustering(n_clusters=<span class="number">5</span>, affinity=<span class="string">'euclidean'</span>, linkage=<span class="string">'ward'</span>)  </span><br><span class="line">cluster.fit_predict(df[[<span class="string">'Murder'</span>, <span class="string">'Assault'</span>, <span class="string">'UrbanPop'</span>, <span class="string">'Rape'</span>]])  </span><br><span class="line"></span><br><span class="line"><span class="comment"># Plot</span></span><br><span class="line">plt.figure(figsize=(<span class="number">14</span>, <span class="number">10</span>), dpi= <span class="number">80</span>)  </span><br><span class="line">plt.scatter(df.iloc[:,<span class="number">0</span>], df.iloc[:,<span class="number">1</span>], c=cluster.labels_, cmap=<span class="string">'tab10'</span>)  </span><br><span class="line"></span><br><span class="line"><span class="comment"># Encircle</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encircle</span><span class="params">(x,y, ax=None, **kw)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> ax: ax=plt.gca()</span><br><span class="line">    p = np.c_[x,y]</span><br><span class="line">    hull = ConvexHull(p)</span><br><span class="line">    poly = plt.Polygon(p[hull.vertices,:], **kw)</span><br><span class="line">    ax.add_patch(poly)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Draw polygon surrounding vertices    </span></span><br><span class="line">encircle(df.loc[cluster.labels_ == <span class="number">0</span>, <span class="string">'Murder'</span>], df.loc[cluster.labels_ == <span class="number">0</span>, <span class="string">'Assault'</span>], ec=<span class="string">"k"</span>, fc=<span class="string">"gold"</span>, alpha=<span class="number">0.2</span>, linewidth=<span class="number">0</span>)</span><br><span class="line">encircle(df.loc[cluster.labels_ == <span class="number">1</span>, <span class="string">'Murder'</span>], df.loc[cluster.labels_ == <span class="number">1</span>, <span class="string">'Assault'</span>], ec=<span class="string">"k"</span>, fc=<span class="string">"tab:blue"</span>, alpha=<span class="number">0.2</span>, linewidth=<span class="number">0</span>)</span><br><span class="line">encircle(df.loc[cluster.labels_ == <span class="number">2</span>, <span class="string">'Murder'</span>], df.loc[cluster.labels_ == <span class="number">2</span>, <span class="string">'Assault'</span>], ec=<span class="string">"k"</span>, fc=<span class="string">"tab:red"</span>, alpha=<span class="number">0.2</span>, linewidth=<span class="number">0</span>)</span><br><span class="line">encircle(df.loc[cluster.labels_ == <span class="number">3</span>, <span class="string">'Murder'</span>], df.loc[cluster.labels_ == <span class="number">3</span>, <span class="string">'Assault'</span>], ec=<span class="string">"k"</span>, fc=<span class="string">"tab:green"</span>, alpha=<span class="number">0.2</span>, linewidth=<span class="number">0</span>)</span><br><span class="line">encircle(df.loc[cluster.labels_ == <span class="number">4</span>, <span class="string">'Murder'</span>], df.loc[cluster.labels_ == <span class="number">4</span>, <span class="string">'Assault'</span>], ec=<span class="string">"k"</span>, fc=<span class="string">"tab:orange"</span>, alpha=<span class="number">0.2</span>, linewidth=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Decorations</span></span><br><span class="line">plt.xlabel(<span class="string">'Murder'</span>); plt.xticks(fontsize=<span class="number">12</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Assault'</span>); plt.yticks(fontsize=<span class="number">12</span>)</span><br><span class="line">plt.title(<span class="string">'Agglomerative Clustering of USArrests (5 Groups)'</span>, fontsize=<span class="number">22</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><figure><img src="http://upload-images.jianshu.io/upload_images/15914329-6fccc0619497f94d.png" alt="" /><figcaption>png</figcaption></figure><h1 id="动态排名数据可视化">动态排名数据可视化</h1><h3 id="将历史数据排名转化为动态柱状图图表">将历史数据排名转化为动态柱状图图表</h3><p>见github地址：<a href="https://github.com/Jannchie/Historical-ranking-data-visualization-based-on-d3.js" target="_blank" rel="noopener">动态排名数据可视化-将历史数据排名转化为动态柱状图图表</a></p><figure><img src="http://upload-images.jianshu.io/upload_images/15914329-c4c0733d0514ca63.png" alt="" /><figcaption>image-20200303132124173</figcaption></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;
&lt;p&gt;一直说要做一个python可视化的学习，今天就来认真学一学。&lt;/p&gt;
&lt;p&gt;交互式的可视化起码我暂时都用不着，先学静态的。知乎搜了一些教程，先列出reference&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://zhuanla
      
    
    </summary>
    
    
      <category term="学习" scheme="http://jaxchan.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="编程" scheme="http://jaxchan.top/categories/%E5%AD%A6%E4%B9%A0/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="python" scheme="http://jaxchan.top/tags/python/"/>
    
      <category term="可视化" scheme="http://jaxchan.top/tags/%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>日记1：关于生活态度的很杂的话</title>
    <link href="http://jaxchan.top/2020/%E6%97%A5%E8%AE%B01%EF%BC%9A%E5%85%B3%E4%BA%8E%E7%94%9F%E6%B4%BB%E6%80%81%E5%BA%A6%E7%9A%84%E5%BE%88%E6%9D%82%E7%9A%84%E8%AF%9D.html/"/>
    <id>http://jaxchan.top/2020/%E6%97%A5%E8%AE%B01%EF%BC%9A%E5%85%B3%E4%BA%8E%E7%94%9F%E6%B4%BB%E6%80%81%E5%BA%A6%E7%9A%84%E5%BE%88%E6%9D%82%E7%9A%84%E8%AF%9D.html/</id>
    <published>2020-03-01T16:35:45.000Z</published>
    <updated>2020-03-01T16:36:47.464Z</updated>
    
    <content type="html"><![CDATA[<h1 id="part1-我觉得缺了些什么">PART1: 我觉得缺了些什么</h1><p>今天是三月份的第一天。</p><p>二月份的24号开学，到现在已经整一个星期了。</p><p>我总是 总是觉得，缺了点什么，但是又说不上来缺了什么。</p><p>可能和在学校做的事情相差无几，但是就是少了一些应有的味道。</p><p>人是群居动物，果真没有错，一个人走得快，一堆人走得远，果真也是没有错。</p><p>我尝试描述一下，我的生活缺了些什么</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">我刚开始想 生活缺了什么的时候</span><br><span class="line">就开始对比在家的生活和在学校生活的差别</span><br><span class="line">那自然是按照时间线索</span><br><span class="line">第一件事 早起肯定是要和舍友拥挤刷牙 一边吹水的</span><br><span class="line">但其实这是一件不好的事 不值得用来怀念</span><br><span class="line">因此我也也就没有写</span><br><span class="line">我是想说 有一些很特别的事 虽然他它很特别 很有味道 但是它终究是没有多好的事</span><br><span class="line">譬如说 之前在我朋友圈很红火的关于海中早餐炒粉的怀念</span><br><span class="line">其实我怎么说呢 我是真的一点一点都不怀念那个炒粉 还有汤粉 还有糯米鸡</span><br><span class="line">我怀念的是 高中的感觉 拼搏的 纯粹的时光以及那一堆好朋友</span><br><span class="line">扯了这么远，我是在这篇日记插播了另一个论点</span><br><span class="line">当我们喜欢一个东西 怀念一段时光 我们分得清楚我们喜欢的是什么 （感情也是这样</span><br></pre></td></tr></table></figure><ol type="1"><li></li></ol><p>缺了些和同龄人的争论</p><p>我是一个经常与别人交流的人 我希望听他们各种各样的故事</p><p>也经常好像满不在意地给出一些建议和反馈 或者 给出一些非常搞笑的评论</p><p>然后再给出我认认真真的建议</p><p>我觉得我是一个离不开社交的人 分辨得清楚一点 我是一个不能不和别人交流的人</p><ol start="2" type="1"><li></li></ol><p>确实是缺了些自由感</p><p>我是一个极其追求自由的人</p><p>比如说今天吃什么 今晚吃什么</p><p>虽然我经常说随便 或者说经常在纠结要吃什么</p><p>但是在家就少了这种纠结</p><p>哦对</p><p>与其说我少了些自由感 还不如说我少了纠结 因为我遇到的问题实在是太少了 相对于上学来说 我遇到的事情少之又少 也因此没什么纠结的地方</p><p>其实这也是不好的 以前的学期我上学就是等于忙得要死 现在突然闲下来 要干的正事好像也没有多大的动力 必须完成的动力去做 可能还没有什么压力吧</p><p>这样说的话 我是缺了些犹豫和纠结</p><ol start="3" type="1"><li></li></ol><p>也没有了</p><h1 id="part2-关于我的生活态度">PART2: 关于我的生活态度</h1><p>很久之前我在朋友圈说过关于生命力的个人阐述，我贴一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">在boring的中国文学与文化通选课里，</span><br><span class="line">黄教授批评了广州的天气，</span><br><span class="line">说几乎不变的气候抑制了人类感触的天性，</span><br><span class="line">说若有四季轮转，方可感受到生命周期的流转。</span><br><span class="line"></span><br><span class="line">今天广州便给足了面子，</span><br><span class="line">和煦的阳光、拂面的风…所有的美好形容词在我脑海里涌了上来。</span><br><span class="line">从酷热到舒适的天气变化，让人感到生命力的存在。</span><br><span class="line"></span><br><span class="line">我一直觉得，变化才是感受生命力的主要因素。</span><br><span class="line">校道的封禁和开垦。</span><br><span class="line">理发店再见和7-11、水果店你好。</span><br><span class="line">新生的报道让学区从冷清到繁忙。</span><br><span class="line">小黄车的没落让青柠和鲜橙降临。</span><br><span class="line"></span><br><span class="line">可能准确来说，新鲜感带来的朦胧美意让人感到迫近幸福。</span><br><span class="line"></span><br><span class="line">我常在想，</span><br><span class="line">要是明天也是这样的天气，我应该不会有那么多赞叹。</span><br><span class="line">要是习惯了新生的存在，应该不再对他们刷卡的手忙脚乱觉得呆萌可爱。</span><br><span class="line">要是习惯了走那条绕路的校道，也不再觉得麻烦，只是走而已。</span><br><span class="line"></span><br><span class="line">生命的活力也是这样陨落的，在习以为常和感触麻木当中。</span><br><span class="line"></span><br><span class="line">我有时候觉得自己是一个追猎新鲜感的可怜动物。虽然现在来说，我也是追求生命的律动。</span><br><span class="line"></span><br><span class="line">我收益于此，不轻易沉迷上瘾活动，</span><br><span class="line">也受限于此，很容易感到无聊与厌倦。</span><br><span class="line"></span><br><span class="line">我也应该改掉这坏习惯，</span><br><span class="line">不能因为习惯了，带来的感受不强了，就否认了某项的价值。</span><br><span class="line">所以，</span><br><span class="line">如果明天是像今天这样的好天气，我就继续像今天一样赞叹它！</span><br></pre></td></tr></table></figure><p>其实我一直没能想清楚，追求新鲜感到底是好还是不好。</p><p>好奇 是好还是不好</p><p>好学 是好还是不好</p><p>热于尝试新的生活方式 接触新的内容 实践新的技术到底是好还是不好</p><p>我觉得上述的问题 在我这里都是好的</p><p>但对于<strong>感情</strong>来说 这个又因为环境的原因我又不能说好 又不能说不好 一直都被世道裹挟着 也因而没有想清楚</p><p><img src="http://upload-images.jianshu.io/upload_images/15914329-35f12abd6e8124f1.jpg" style="zoom:50%;" /></p><p>其实也经不起推敲 生活琐碎之事明明是那么多 每天也是要吃饭睡觉 总不能不睡觉就当作是新鲜</p><p>所以说</p><p>其实对于感情这一块 根本就没有答案</p><p>只有遇到了对的人 无论是做什么重复的事 也会觉得甘之如饴 那也就不需要讨论这个感情是否需要新鲜感的事了</p><p>当然了 感情还是需要保鲜的</p><h1 id="part3-我最近想做的事">PART3: 我最近想做的事</h1><p>这个blog始终是一个不完整的blog。首先它没有评论功能，而且它的图床没有用我个人的图床，而是用第三方的。但是我最近，起码是在自己买vps之前我都不打算改进了。</p><p>本周内吧：</p><ul><li>我要先把一篇tutorial写完</li><li>要再看两篇数模的论文</li><li>学习一下python可视化</li><li>也不妨也看看实习和面试的东西</li><li>也不妨和大家多聊聊天</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;part1-我觉得缺了些什么&quot;&gt;PART1: 我觉得缺了些什么&lt;/h1&gt;
&lt;p&gt;今天是三月份的第一天。&lt;/p&gt;
&lt;p&gt;二月份的24号开学，到现在已经整一个星期了。&lt;/p&gt;
&lt;p&gt;我总是 总是觉得，缺了点什么，但是又说不上来缺了什么。&lt;/p&gt;
&lt;p&gt;可能和在
      
    
    </summary>
    
    
      <category term="日记" scheme="http://jaxchan.top/categories/%E6%97%A5%E8%AE%B0/"/>
    
      <category term="生活" scheme="http://jaxchan.top/categories/%E6%97%A5%E8%AE%B0/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="日记" scheme="http://jaxchan.top/tags/%E6%97%A5%E8%AE%B0/"/>
    
      <category term="新鲜感" scheme="http://jaxchan.top/tags/%E6%96%B0%E9%B2%9C%E6%84%9F/"/>
    
      <category term="面试" scheme="http://jaxchan.top/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="数模" scheme="http://jaxchan.top/tags/%E6%95%B0%E6%A8%A1/"/>
    
  </entry>
  
  <entry>
    <title>开学：今天天气很好，适合养龙</title>
    <link href="http://jaxchan.top/2020/%E5%BC%80%E5%AD%A6%EF%BC%9A%E4%BB%8A%E5%A4%A9%E5%A4%A9%E6%B0%94%E5%BE%88%E5%A5%BD%EF%BC%8C%E9%80%82%E5%90%88%E5%85%BB%E9%BE%99.html/"/>
    <id>http://jaxchan.top/2020/%E5%BC%80%E5%AD%A6%EF%BC%9A%E4%BB%8A%E5%A4%A9%E5%A4%A9%E6%B0%94%E5%BE%88%E5%A5%BD%EF%BC%8C%E9%80%82%E5%90%88%E5%85%BB%E9%BE%99.html/</id>
    <published>2020-02-26T03:33:45.000Z</published>
    <updated>2020-02-28T11:52:59.828Z</updated>
    
    <content type="html"><![CDATA[<h1 id="没用的话">没用的话</h1><p>前天是2.24，是学校开学的第一天，为了升旗很早就起床了。没想到昨天和今天也很早就自然醒，也许调整生物钟也只需要早起一两天就会调整回去。</p><p>昨天我跟妈妈说今天天气很好，妈妈说这几天天气都很好。我说，如果我在学校，每每我看到天空我就会说，"今天天气很好"，然后舍友就会说"知道了你说天气很好说了十几遍了"。妈妈大笑。</p><p>我只有周四才有两门课，所以我都没感觉到开学了和没开学的区别在哪里，只是该做事情还在做，该打的游戏的还在打。</p><p>最近和舍友一起在讨论工作、读研和出国的利弊，我一直都在纠结，开学后我觉得要认真考虑好做出抉择了。放假便感觉所有事情都存档了，开学便把存档重新拿出来。然后上学期没有思考清楚的东西作出选择的东西，现在又要去真正地抉择，但也好，上学期纠结的东西有些现在已经完全不纠结了。</p><p>最近可以做的事就是：看看各位导师；看看各个就业岗位要求；少刷抖音多刷知乎</p><p><img src="http://upload-images.jianshu.io/upload_images/15914329-14fa3dfa4abaff4a.jpg" /></p><center>开学升旗后拍的日出</center><h1 id="前言">前言</h1><p>要开始准备美赛的东西了。对于建模我只有模糊的想法，没有很入门，现在就先看这个题目和优秀论文感受一下，看看后面学什么比较合适。</p><p>看完之后觉得... 要学习画画（开玩笑） 要学解方程（到时候交给别人吧？） 要学数据可视化（简单学学） 还有多看看科普文章</p><p>后面再看一两篇感受一下。</p><h1 id="原题">原题</h1><p>查看 <strong><a href="https://github.com/zouzhenhong98/2019MCM" target="_blank" rel="noopener">2019MCM</a></strong></p><p><img src="http://upload-images.jianshu.io/upload_images/15914329-9aaa9144c291de30.png" /></p><h1 id="读题">读题</h1><h2 id="问题描述">问题描述</h2><p>分析龙的特性、行为、习惯、饮食和与环境的交互。</p><p>完成以下基本问题：</p><ol type="1"><li>龙的生态环境（需求）是什么？龙的生态影响是什么？</li><li>龙的能源（体能）支出是多少</li><li>卡路里摄入的需求量是多少？</li><li>养三条龙 需要多大的地方？</li><li>需要多大的社区来 给三条龙 提供各种各样的援助？</li></ol><p>关于迁徙事件，<strong>气候条件对你的分析有多重要</strong>？</p><ul><li>在干旱地区、温暖地区、北极（极寒） 之间发生迁徙行为时，所需要的资源变化</li></ul><p>完成分析后，写一封两页的信给《冰与火之歌》的作者，告诉他如何保持现代的生态基础，尤其是由干旱地区到温热地区或者到北极地区。</p><h2 id="给定条件">给定条件</h2><ol type="1"><li>三条龙</li><li>孵化出来时，很小，大概是10kg，一年后大概是30kg-40kg</li><li>一生都会成长，成长程度取决于 饲喂的食物的<strong>质量</strong>和<strong>数量</strong></li><li>活在当今时代</li></ol><h2 id="建议假设">建议假设</h2><p>假设原则：<strong>应该清楚假设与 功能性、大小、饮食、改变等特性的联系性</strong></p><p>题目给出了一些假设建议：</p><ol type="1"><li>龙飞得很远</li><li>呼吸火</li><li>抵御巨大创伤</li></ol><hr /><h1 id="优秀论文阅读">优秀论文阅读</h1><h2 id="前提假设">前提假设</h2><ul><li>龙的生长、成熟遵循基本的生物规则。</li><li>龙是恒温动物。</li><li>龙会飞和承受巨伤，不会因为物理、化学、生物攻击而轻易死亡。飞行满足空气动力学。成熟的龙是地球最大的生物。龙会喷火。</li><li>龙汲取的能量要满足基本生活和成长的消耗。</li><li>龙出生的长度为30-40cm。根据爬行动物幼体和电视剧推测。</li><li>龙一旦进入新的生态圈，那便编程该圈最顶级的消费者。但龙不会给生物圈造成致命的损坏。并且人类可以有效地控制龙。</li></ul><h2 id="符号">符号</h2><p><img src="http://upload-images.jianshu.io/upload_images/15914329-6b374807954327fe.png" /></p><h2 id="dragons-physical-characteristics-and-diet">Dragon’s Physical Characteristics and Diet</h2><p>假设龙在25℃的温带环境，可以从环境获取充足食物。根据形态学，生物不可能无限生长，所以龙成熟之后，weight和lengt0 ( shoulder to hip ) 都会被限制。</p><h3 id="dragons-weight-logistic-growth-model">Dragon’s Weight Logistic Growth Model</h3><p>由于体型和环境容量限制，龙的体重会逐渐被限制增长。</p><p>暂假设龙的成长不会被环境和体型限制，因此体重满足： <span class="math display">\[\frac{d W(t)}{d t}=r W(t)\]</span> 现补充形态限制， <span class="math display">\[\frac{d W(t)}{d t}=r W(t)\left(1-\frac{W(t)}{W_{\max }}\right)\]</span></p><p>又因：多数有机体在温度较高的环境而体型变小，假设温度对龙的成长的影响是线性的，故更新为 <span class="math display">\[\frac{d W(t)}{d t}=r W(t)\left(1-\frac{W(t)}{W_{\max }}-\sigma T\right)\]</span> 假设龙出生为10kg，即W(0) = 10. 故有如下加权一阶非线性微分方程 <span class="math display">\[\left\{\begin{array}{l}{\frac{d W(t)}{d t}=r W(t)\left(1-\frac{W(t)}{W_{\max }}-\sigma T\right)} \\{W(0)=10}\end{array}\right.\]</span> 为了方便求解，令<span class="math inline">\(\alpha=1-\sigma T,\sigma=0.04\)</span> ， 故可求解为： <span class="math display">\[W(t)=10 \alpha W_{\max } \frac{e^{\alpha r t}}{\alpha K+10 e^{\alpha r t-1}}\]</span></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">K是什么？</span><br></pre></td></tr></table></figure><p>现在我们求解一下参数r</p><p><img src="http://upload-images.jianshu.io/upload_images/15914329-bebee1573679f0dc.png" /></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">不知道怎么来的？？</span><br></pre></td></tr></table></figure><p>因此 r 的范围是 20 - 30，单位是 kg/year</p><p>综上所述，有以下参数</p><p><img src="http://upload-images.jianshu.io/upload_images/15914329-da49b3a25f79b56c.png" /></p><p>可以画出W(t)的图：</p><p><img src="http://upload-images.jianshu.io/upload_images/15914329-1b9cd54962589a2a.png" /></p><p>最大值为15ton</p><h3 id="dragons-length-analysis-based-on-analogy">Dragon’s Length Analysis Based on Analogy</h3><p>把龙假设为圆柱体，长为L米，直径为D米，底面积为S。</p><p><img src="http://upload-images.jianshu.io/upload_images/15914329-3f2fcc9df2e3ffde.png" /></p><p>由于重力的影响，假设圆柱体弯曲度为C米，根据机械学有 <span class="math display">\[\frac{C}{L} \propto \frac{W L^{3}}{S d^{2}}\]</span> 且C/L为定值</p><p>假设密度均等，固有 <span class="math display">\[W \propto S L, S \propto d^{2}\]</span> 根据上述两个式子得 <span class="math display">\[W=k L^{4}\]</span></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这个W是怎么推出来的？</span><br></pre></td></tr></table></figure><p>根据电视剧可以得初生龙为0.7m~0.9m，而W(0) = 10 可算k</p><p>可画出如下的图</p><p><img src="http://upload-images.jianshu.io/upload_images/15914329-8d317252c542c690.png" /></p><h3 id="dragons-energy-expenditure-and-caloric-intake">Dragon’s Energy Expenditure and Caloric Intake</h3><p>根据假设，龙是恒温的肉食动物。故龙的能量摄入至少等于龙的能量消耗，而可认为龙的能量消耗主要等于飞行和喷火。</p><h4 id="dragons-diet-and-energy-consumption-during-flight">Dragon’s Diet and Energy Consumption during Flight</h4><p>在此章节不考虑龙喷火。</p><p>北方人摄入2000cal/day， 假设能量设如与身体重量成正比，可估算成熟龙需要摄入400,000cal/day</p><p>同理，</p><p>冰原狼食用12kg/day的肉，假设肉的消耗量与身体重量成正比，可估算龙食用的肉为900kg/day. 假设羊咩咩重100kg，那么龙每天需要消耗羊 9pcs/day</p><p>麻雀在飞行时，消耗脂肪0.08g/hour. 假设此消耗与身体重量成正比，可估算龙飞行时消耗脂肪80kg/hour</p><p><img src="http://upload-images.jianshu.io/upload_images/15914329-763457b3c4eb3bf5.png" alt="" style="zoom: 80%;" /></p><h4 id="dragons-fire-chemical-kinetics-model">Dragon’s Fire Chemical Kinetics Model</h4><ul><li><strong>估算龙火焰的温度</strong></li></ul><p>根据电视剧龙烧军队时，盔甲融化和蒸发的场景，假设盔甲由铁组成，铁的熔点是1538℃，沸点是2862℃。可以肯定，火焰温度比铁的沸点要高。（）</p><ul><li><strong>龙的火焰气体的化学组成成分</strong></li></ul><p>查表发现乙醚的沸点与铁的沸点相似。f因此假设龙的气体为乙醚。</p><ul><li><strong>乙醚的生成</strong></li></ul><p>醚的最简单制备方法是在高温和浓硫酸的催化下将<strong>无水乙醇</strong>脱水成醚。假设龙自身可以生成催化剂， <span class="math display">\[2 \mathrm{CH}_{3} \mathrm{CH}_{2} \mathrm{OH}\left(\mathrm{C}_{2} \mathrm{H}_{6} \mathrm{O}\right) \frac{\text { Speceial Catalyst }}{\text { Concentrated } \mathrm{H}_{2} \mathrm{SO}_{4}} \mathrm{CH}_{3} \mathrm{CH}_{2} \mathrm{OCH}_{2} \mathrm{CH}_{3}\left(\mathrm{C}_{4} \mathrm{H}_{10} \mathrm{O}\right) \uparrow+\mathrm{H}_{2} \mathrm{O} \uparrow\]</span></p><ul><li><strong>重构龙的口腔结构</strong></li></ul><p>腺体A负责产生硫酸，腺体B产生无水乙醇，腺体C作为化学反应的容器。可估计硫酸来自胃酸以及含硫氨基酸，这些需要肉。而肉的分解又会产生无水酒精。</p><p><img src="http://upload-images.jianshu.io/upload_images/15914329-7ddbe5877ce04540.png" alt=""  /></p><ul><li><p><strong>估计喷火的能量消耗</strong></p><p>可以根据火焰燃烧的温度以及C的容量来估算能量消耗。</p><ul><li>V：根据电视剧，腺体C的大小估计和人类的胃差不多大。</li><li>Q：即为乙醚在100kPa和25℃下的燃烧热。</li><li><span class="math inline">\(\rho\)</span> ： 乙醚的液体密度</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">此处暂略，是化学题。</span><br></pre></td></tr></table></figure><p>可算得喷火的能量消耗<span class="math inline">\(\Sigma=Q \rho V / M=19716.72 k J\)</span>。假设一天C只充能一次，那一天就要<span class="math inline">\(\Sigma\)</span>的能量。</p></li></ul><h2 id="dragon-sheep-habitat-model">Dragon-Sheep-Habitat Model</h2><h3 id="模型分析">模型分析</h3><p>假设：</p><p>龙的范围只是该生物圈的范围。</p><p>龙是顶级的消费者。</p><p>该生物圈等价为只有羊。</p><p>故龙进入该生物圈后，存在： <span class="math display">\[\left\{\begin{array}{l}{\frac{d N(t)}{d t}=p N(t)\left(1-\frac{N(t)}{K}\right)-a} \\{N(0)=K}\end{array}\right.\]</span> 其中N(t)表示羊的数量；p为常量，表示羊繁殖原本规律；K表示龙未进入生物群时候达到生态平衡时，羊的数量；a是成年龙每天要吃的羊数量。</p><p>根据上面分析，a=9，也可以设超参数p=0.01.</p><p>根据不同的K值，方程有不同的解。有的解最终可能导致羊的数量变为0，有的会使得羊和龙达到生态平衡。结果如下：</p><p><img src="http://upload-images.jianshu.io/upload_images/15914329-aab1f9136b238cf0.png" /></p><p>又假设羊的平衡数量K与面积成正比，再查资料可求解以下方程的参数b：</p><p><img src="http://upload-images.jianshu.io/upload_images/15914329-30860305ebe502b8.png" /></p><p>故当K取5000（最后会平衡为3800），可求出生物圈的面积大小。</p><p>故得出结论</p><ul><li>龙的栖息地起码400km²</li><li>开始起码要有4000头羊。根据食物链传播能量损失，可以等价为：</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/15914329-a953e838ed098bbe.png" /></p><h2 id="impact-of-three-regions-on-dragons-survival">Impact of Three Regions on Dragon’s Survival</h2><h3 id="difference-in-daily-energy-intake-of-dragons-in-three-regions">Difference in Daily Energy Intake of Dragons in Three Regions</h3><p>根据人的数据，龙在严寒地区新陈代谢是温带的1.3倍，龙在热带是温带的0.9倍。</p><p>9羊估计是460,000cal，可以计算在严寒地区和热带的cal消耗量，以及相对应羊的销号数量。</p><h3 id="three-regions-capability-about-self-recovery-and-supporting-dragons">Three Regions’ Capability about Self-Recovery and Supporting Dragons</h3><p>温带的恢复能力最强，其他两个地区较弱，可以相应调参。根据不同的参数，可以得出不同环境的容量。</p><p><img src="http://upload-images.jianshu.io/upload_images/15914329-e88ffc2ad1cebc27.png" /></p><h2 id="sensitivity-analysis">Sensitivity Analysis</h2><p>分析参数的敏感度。</p><h2 id="model-evaluation-and-further-discussion">Model Evaluation and Further Discussion</h2><h3 id="evaluation-of-models">Evaluation of Models</h3><p>分析自己模型哪里好哪里不好。</p><h3 id="further-discussion">Further Discussion</h3><p>模型的现实意义。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;没用的话&quot;&gt;没用的话&lt;/h1&gt;
&lt;p&gt;前天是2.24，是学校开学的第一天，为了升旗很早就起床了。没想到昨天和今天也很早就自然醒，也许调整生物钟也只需要早起一两天就会调整回去。&lt;/p&gt;
&lt;p&gt;昨天我跟妈妈说今天天气很好，妈妈说这几天天气都很好。我说，如果我在学校
      
    
    </summary>
    
    
      <category term="美赛" scheme="http://jaxchan.top/categories/%E7%BE%8E%E8%B5%9B/"/>
    
      <category term="日记" scheme="http://jaxchan.top/categories/%E7%BE%8E%E8%B5%9B/%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="学习" scheme="http://jaxchan.top/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="生活" scheme="http://jaxchan.top/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>GO笔记</title>
    <link href="http://jaxchan.top/2020/GO%E7%AC%94%E8%AE%B0.html/"/>
    <id>http://jaxchan.top/2020/GO%E7%AC%94%E8%AE%B0.html/</id>
    <published>2020-02-21T06:56:34.000Z</published>
    <updated>2020-02-28T10:56:30.904Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>记录Go学习过程中关于package 调用-再封装的知识点。</p><h1 id="package注意事项">package注意事项</h1><ul><li>一个文件目录下的go文件隶属同一个pakcage</li><li>如果不用<strong>go mod</strong>，绝对路径：那项目应该创在 <strong>$GOPATH</strong> 或者 <strong>$GOPATH</strong> 的src下</li><li>可以使用相对路径</li><li>对于结构体，大写属性才对外可见。<em>如name对外包不可见，Name可见。</em></li></ul><h1 id="init-函数">init() 函数</h1><ul><li>在导入main前被执行</li><li>无返回无参数</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>一个go文件下可以有多个init()函数，先写先被调用。</p></li><li><p>同个package下的不同go文件，是对<strong>go文件名</strong>排序执行。</p></li><li><p>对不同的package，</p><ul><li>若package间无依赖，按照import顺序执行</li><li>否则，先从最深处执行。</li></ul></li><li><p>import _ "package"： 下划线表示导入只执行init</p></li></ul><h1 id="package---time">package - time</h1><ul><li>导入</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"time"</span></span><br></pre></td></tr></table></figure><ul><li>获取当前时间</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t1 := time.Now()</span><br></pre></td></tr></table></figure><ul><li>时间格式化（time对象转string） ： Jan 2 15:04:05 2006</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s1 := t1.Format(<span class="string">"2006年1月2日 15:04:05"</span>)</span><br><span class="line"><span class="comment">//如果已经设置好了Format</span></span><br><span class="line">s1:= t1.String()</span><br></pre></td></tr></table></figure><ul><li>string转time对象 <strong>（需要提前设置好格式）</strong></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t2:= time.Parse(s1)</span><br></pre></td></tr></table></figure><ul><li>time对象获取具体 年月日 时分秒数据</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">year,month,day := t1.Date()</span><br><span class="line">hour,min,sec := t1.Date()</span><br><span class="line"></span><br><span class="line"><span class="comment">//也可以分别获取 </span></span><br><span class="line">year:=t1.Year()</span><br><span class="line"></span><br><span class="line"><span class="comment">//周几</span></span><br><span class="line">t1.Weekday()</span><br><span class="line"></span><br><span class="line"><span class="comment">//一年过了几天</span></span><br><span class="line">t1.YearDay()</span><br></pre></td></tr></table></figure><ul><li>获取时间戳 与1970年1月1日0:00:00的时间差</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t1.Unix() <span class="comment">//秒为单位</span></span><br></pre></td></tr></table></figure><ul><li>时间加减</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t1.Add( <span class="number">2</span> * time.Hour ) <span class="comment">// 以秒为单位</span></span><br></pre></td></tr></table></figure><ul><li>程序睡眠</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">time.Sleep( <span class="number">3</span> * time.Second )</span><br></pre></td></tr></table></figure><h1 id="package---rand">package - rand</h1><ul><li>设置种子</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rand.Seed(time.Now().Unix())</span><br></pre></td></tr></table></figure><ul><li>随机整数</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rand.Intn(<span class="number">10</span>) <span class="comment">//[0,9] 返回int 注意time.Sleep(int64)</span></span><br></pre></td></tr></table></figure><h1 id="package---os-关于文件">package - os 关于文件</h1><ul><li><p>获取文件基本信息</p><ul><li>使用 os.Stat(文件名) 获取</li><li>文件大小是byte格式的 <em>uint8</em> ， 一个字母就是一个byte</li></ul></li><li><p>创建文件的时候，需要给出权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">r 004 &#x2F;&#x2F;读</span><br><span class="line">w 002 &#x2F;&#x2F;写</span><br><span class="line">x 001 &#x2F;&#x2F;执行</span><br><span class="line">- 000 &#x2F;&#x2F;无</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tyepe - owner - group - others</span><br><span class="line">0777 所有权限 &#x2F;&#x2F;os.ModePerm</span><br></pre></td></tr></table></figure></li><li><p>相对路径与绝对路径</p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断是否为绝对路径</span></span><br><span class="line">fileName := <span class="string">"./a.txt"</span></span><br><span class="line">filepath.IsAbs(fileName)</span><br><span class="line"></span><br><span class="line"><span class="comment">//相对路径转为绝对路几个</span></span><br><span class="line">absPath,err := filePath.Abs(fileName)</span><br></pre></td></tr></table></figure><ul><li>获取父目录</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path.Join( 绝对路径, <span class="string">".."</span>)</span><br></pre></td></tr></table></figure><ul><li>创建文件夹</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单个创建</span></span><br><span class="line">err:=os.Mkdir(路径,os.ModePerm)</span><br><span class="line"><span class="comment">//递归创建</span></span><br><span class="line">err:=os.MkdirAll(路径,os.ModePerm)</span><br></pre></td></tr></table></figure><ul><li>创建文件</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//默认权限是0666 如果已经存在会置空</span></span><br><span class="line">file,err := os.Create(路径)</span><br></pre></td></tr></table></figure><ul><li>打开文件</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//默认是只读</span></span><br><span class="line">file,err := os.Open(路径)</span><br><span class="line"></span><br><span class="line"><span class="comment">//指定权限，也要指定创建的权限（若不存在就要使用）</span></span><br><span class="line">file,err := os.OpenFile( 路径，os.RDONLY||os.WRONLY,os.ModePerm)</span><br><span class="line"></span><br><span class="line"><span class="comment">//记得关闭</span></span><br><span class="line"><span class="keyword">defer</span> file.Close()</span><br></pre></td></tr></table></figure><ul><li>删除文件或者文件夹</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除文件或者空文件夹</span></span><br><span class="line">err:=os.Remove(路径) </span><br><span class="line"></span><br><span class="line"><span class="comment">//递归删除</span></span><br><span class="line">err:=os.RemoveAll(路径)</span><br></pre></td></tr></table></figure><h1 id="package---io">package - io</h1><ul><li>读取数据<ul><li>使用Read()方法是会记录当前指针的，所以多次调用就会往后读取数据。</li><li>读完了err为EOF</li><li>指定位置需要使用 WriteAt</li></ul></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//打开文件</span></span><br><span class="line">fileName := 文件路径</span><br><span class="line">file,err:=os.Open(fileName)</span><br><span class="line"><span class="keyword">if</span> err!=<span class="literal">nil</span>&#123;</span><br><span class="line">    fmt.Println(err)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">defer</span> file.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建存储切片 </span></span><br><span class="line">bs := <span class="built_in">make</span>([]<span class="keyword">byte</span>,<span class="number">4</span>,<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取数据 </span></span><br><span class="line">n,err:=file.Read(bs)</span><br><span class="line"><span class="comment">//bs里面存的是ASCII编码数值 需要转为string</span></span><br><span class="line">s1 := <span class="keyword">string</span>(bs)</span><br></pre></td></tr></table></figure><p>使用ioutil也很方便，会一次性读完</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bs,err:=ioutil.ReadFile(srcPath)</span><br></pre></td></tr></table></figure><p>更普遍的写法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">bs:=<span class="built_in">make</span>([]<span class="keyword">byte</span>,<span class="number">1024</span>,<span class="number">1024</span>)</span><br><span class="line">n,err:=file.Read(bs)</span><br><span class="line"><span class="keyword">var</span> data <span class="keyword">string</span></span><br><span class="line"><span class="keyword">if</span> err!=EOF&#123;</span><br><span class="line">    data = <span class="keyword">string</span>(bs[:n])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>写操作</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//打开文件</span></span><br><span class="line">fileName := 路径</span><br><span class="line"><span class="comment">//如果追加，要加os.O_APPEND</span></span><br><span class="line">file,err:=os.OpenFile(fileName,os.O_Create|os.O_WRONLY,os.ModePerm)</span><br><span class="line"><span class="keyword">if</span> err!=<span class="literal">nil</span>&#123;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="keyword">defer</span> file.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">//写入数据</span></span><br><span class="line">bs:=[]<span class="keyword">byte</span>&#123;<span class="number">65</span>,<span class="number">66</span>,<span class="number">67</span>,<span class="number">68</span>&#125;</span><br><span class="line">n,err:=file.Write(bs)</span><br><span class="line"></span><br><span class="line"><span class="comment">//也可以直接写入String</span></span><br><span class="line">n,err := file.Write(<span class="keyword">byte</span>[](<span class="string">"测试"</span>) )</span><br><span class="line">n,err := file.WriteString(<span class="string">"测试"</span>)</span><br></pre></td></tr></table></figure><p>也可以用ioutil，会一次性写完</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">err:=ioutil.WriteFile(dstPath,bs,os.ModePerm)</span><br></pre></td></tr></table></figure><ul><li>文件copy</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//File都是io.File对象</span></span><br><span class="line">io.Copy(srcFile,dstFile)</span><br></pre></td></tr></table></figure><h1 id="package---bufferio">package - bufferio</h1><ul><li>创建缓冲，减少访问磁盘的次数。</li><li>读入。只有 <strong>读取的文件的大小</strong> 远大于 <strong>缓冲区的大小</strong> 的时候才有效。</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//先创文件</span></span><br><span class="line">file,err:=os.Open(filePath)</span><br><span class="line"><span class="keyword">defer</span> file.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">//创立缓冲区 default size=4096</span></span><br><span class="line"><span class="comment">//如果从键盘读入，那file应该为os.Stdin</span></span><br><span class="line">b1 := bufio.NewReader(file)</span><br><span class="line"></span><br><span class="line"><span class="comment">//把数据读入p</span></span><br><span class="line">p:= <span class="built_in">make</span>(<span class="keyword">byte</span>[],<span class="number">1024</span>,<span class="number">1024</span>)</span><br><span class="line">n,err:=b1.Read(p)</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果只想读行，但不建议使用</span></span><br><span class="line">data,flag,err:=b1.ReadLine()</span><br><span class="line"></span><br><span class="line"><span class="comment">//指定分隔符</span></span><br><span class="line">s1,err:=b1.ReadString(<span class="string">'\n'</span>)</span><br></pre></td></tr></table></figure><ul><li>写出。</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">file,err:=os.OpenFile(...)</span><br><span class="line"><span class="keyword">defer</span> ...</span><br><span class="line">w1:=bufio.NewWriter(file)</span><br><span class="line">n,err:=w1.WriteString(<span class="string">"测试"</span>)</span><br><span class="line"><span class="comment">//必须刷新缓冲区，才会写入文件</span></span><br><span class="line">w1.Flush()</span><br></pre></td></tr></table></figure><h1 id="package---ioutil">package - ioutil</h1><ul><li>一次性读完数据</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//读出是byte[]类型</span></span><br><span class="line">data,err:=ioutil.ReadFile(filePath)</span><br></pre></td></tr></table></figure><ul><li>一次性写入数据</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ioutil.WriteFile(filePath,<span class="keyword">byte</span>[](<span class="string">"测试"</span>),os.ModePerm)</span><br></pre></td></tr></table></figure><ul><li>创建临时目录和临时文件夹</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第二个参数是prefix</span></span><br><span class="line">dir,err := ioutil.TempDir(路径,<span class="string">"Test"</span>)</span><br><span class="line"><span class="keyword">defer</span> os.Remove(dir)</span><br><span class="line"></span><br><span class="line">file,err := ioutil.TempFile(路径,<span class="string">"Test"</span>)</span><br><span class="line"><span class="keyword">defer</span> os.Remove(file.Name()) <span class="comment">//file.Name()是绝对路径</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;
&lt;p&gt;记录Go学习过程中关于package 调用-再封装的知识点。&lt;/p&gt;
&lt;h1 id=&quot;package注意事项&quot;&gt;package注意事项&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;一个文件目录下的go文件隶属同一个pakcage&lt;/li&gt;

      
    
    </summary>
    
    
      <category term="编程" scheme="http://jaxchan.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="go" scheme="http://jaxchan.top/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>我的博客的前世今生</title>
    <link href="http://jaxchan.top/2020/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F.html/"/>
    <id>http://jaxchan.top/2020/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F.html/</id>
    <published>2020-02-20T15:35:45.000Z</published>
    <updated>2020-02-28T11:54:18.513Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为什么要搭博客">为什么要搭博客</h1><p>有很多原因，总的来说便是反正闲着也是闲着。</p><p><img src="http://upload-images.jianshu.io/upload_images/15914329-0c1027fbe037348b.png" alt="我做的东西" style="zoom:67%;" /></p><p>但也可以深究，</p><ul><li>我常常觉得，要是有某个功能的网站/软件就好了。<ul><li>于是这个blog可能常常出现新功能，新活动..（如果我有空的话</li></ul></li><li>学习了某项软件技术，我常觉得得不到实践与施展。<ul><li>所以这里有的东西可能就是为了技术而生，而不是为了应用而生。</li></ul></li><li>我作为一个软件工程的学生，两三年下来半件成品没有，实在过意不去。<ul><li><strong>这个blog是直接使用Hexo搭建，放在github上托管的。</strong></li><li><strong>事实上我自己已经做了一个半成品的博客，因为维护麻烦而放弃。</strong><ul><li>网站的前后端代码都开源，欢迎给star。<ul><li><a href="https://github.com/JaxChan25/borderland" target="_blank" rel="noopener">后端</a></li><li><a href="https://github.com/JaxChan25/borderland-FE" target="_blank" rel="noopener">前端</a></li></ul></li></ul></li></ul></li></ul><figure><img src="http://upload-images.jianshu.io/upload_images/15914329-1a88334c206dab47.png" alt="" /><figcaption>之前自己搭的博客</figcaption></figure><h1 id="这个博客有什么内容">这个博客有什么内容</h1><p>我倒没有想清楚，我对它只有一个要求，就是好看。</p><p>只有一些模糊的内容设想，</p><p>关于我个人的笔录：</p><ul><li>我的生活随感</li><li>我的学习笔记</li><li>我的匿名留言箱</li></ul><p>关于社交活动类型：</p><ul><li>致力于解决华工单身率过高的问题</li></ul><p><strong>但现在已经不用后端了，所以社交活动类型的活动想法是实现不了了。</strong></p><h1 id="这个博客会开通多久">这个博客会开通多久</h1><p>现在东西都放在github，也没什么地方需要花钱的。所以会一直开。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">之前的说法：</span><br><span class="line">毕竟时间很宝贵，而且开服务器、买存储和流量都是钱，</span><br><span class="line"></span><br><span class="line">当有一天我觉得与其折腾自己，还不如发条朋友圈来得简单实在，我就不再运营了。</span><br></pre></td></tr></table></figure><p><img src="http://upload-images.jianshu.io/upload_images/15914329-f32f2a77e727ca34.png" alt="record" style="zoom: 50%;" /></p><h1 id="特别感谢">特别感谢</h1><p>感谢同学 <a href="https://github.com/LinZong" target="_blank" rel="noopener">林总</a> 一直给予技术上的支持。</p><p>感谢 <a href="https://github.com/bydmm" target="_blank" rel="noopener">ChengKa</a> <a href="https://github.com/biaochenxuying" target="_blank" rel="noopener">biaochenxuying</a> 的前后端教程。</p><p>感谢同学 <a href="https://github.com/faujnuliaug" target="_blank" rel="noopener">范某</a> 的协作开发。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;为什么要搭博客&quot;&gt;为什么要搭博客&lt;/h1&gt;
&lt;p&gt;有很多原因，总的来说便是反正闲着也是闲着。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/15914329-0c1027fbe03
      
    
    </summary>
    
    
      <category term="建站日记" scheme="http://jaxchan.top/categories/%E5%BB%BA%E7%AB%99%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="golang" scheme="http://jaxchan.top/tags/golang/"/>
    
      <category term="vue" scheme="http://jaxchan.top/tags/vue/"/>
    
      <category term="学习" scheme="http://jaxchan.top/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="生活" scheme="http://jaxchan.top/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
</feed>
